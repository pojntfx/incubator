{"id":"../node_modules/autolinker/dist/Autolinker.js","dependencies":[{"name":"/var/home/pojntfx/Projects/incubator/packages/html-visualizer/package.json","includedInParent":true,"mtime":1555234933789},{"name":"/var/home/pojntfx/Projects/incubator/.babelrc","includedInParent":true,"mtime":1555171676277},{"name":"/var/home/pojntfx/Projects/incubator/packages/html-visualizer/node_modules/autolinker/package.json","includedInParent":true,"mtime":1555172051884}],"generated":{"js":"var define;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['Autolinker'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Autolinker'] = factory();\n  }\n}(this, function () {\n\n/*!\n * Autolinker.js\n * 0.15.3\n *\n * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT Licensed. http://www.opensource.org/licenses/mit-license.php\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n/**\n * @class Autolinker\n * @extends Object\n * \n * Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in \n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n * \n * Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which\n * will configure how the {@link #link link()} method will process the links.\n * \n * For example:\n * \n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     \n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n * \n * \n * The {@link #static-link static link()} method may also be used to inline options into a single call, which may\n * be more convenient for one-off uses. For example:\n * \n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n * \n * \n * ## Custom Replacements of Links\n * \n * If the configuration options do not provide enough flexibility, a {@link #replaceFn} may be provided to fully customize\n * the output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.\n * \n * For example:\n * \n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *     \n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *         \n *             switch( match.getType() ) {\n *                 case 'url' : \n *                     console.log( \"url: \", match.getUrl() );\n *                     \n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *                         \n *                         return tag;\n *                         \n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *                     \n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *                     \n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *                 \n *                 case 'twitter' :\n *                     var twitterHandle = match.getTwitterHandle();\n *                     console.log( twitterHandle );\n *                     \n *                     return '<a href=\"http://newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\n *             }\n *         }\n *     } );\n * \n * \n * The function may return the following values:\n * \n * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\n *   the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.\n * \n * @constructor\n * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).\n */\nvar Autolinker = function( cfg ) {\n\tAutolinker.Util.assign( this, cfg );  // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.\n};\n\n\nAutolinker.prototype = {\n\tconstructor : Autolinker,  // fix constructor property\n\t\n\t/**\n\t * @cfg {Boolean} urls\n\t * \n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\t\n\t/**\n\t * @cfg {Boolean} email\n\t * \n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\t\n\t/**\n\t * @cfg {Boolean} twitter\n\t * \n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\t\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * \n\t * `true` if the links should open in a new window, `false` otherwise.\n\t */\n\tnewWindow : true,\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t * \n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text, \n\t * `false` otherwise.\n\t */\n\tstripPrefix : true,\n\t\n\t/**\n\t * @cfg {Number} truncate\n\t * \n\t * A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of \n\t * a link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by \n\t * adding a two period ellipsis ('..') to the end of the string.\n\t * \n\t * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\n\t * something like this: 'yahoo.com/some/long/pat..'\n\t */\n\ttruncate : undefined,\n\t\n\t/**\n\t * @cfg {String} className\n\t * \n\t * A CSS class name to add to the generated links. This class will be added to all links, as well as this class\n\t * plus url/email/twitter suffixes for styling url/email/twitter links differently.\n\t * \n\t * For example, if this config is provided as \"myLink\", then:\n\t * \n\t * - URL links will have the CSS classes: \"myLink myLink-url\"\n\t * - Email links will have the CSS classes: \"myLink myLink-email\", and\n\t * - Twitter links will have the CSS classes: \"myLink myLink-twitter\"\n\t */\n\tclassName : \"\",\n\t\n\t/**\n\t * @cfg {Function} replaceFn\n\t * \n\t * A function to individually process each URL/Email/Twitter match found in the input string.\n\t * \n\t * See the class's description for usage.\n\t * \n\t * This function is called with the following parameters:\n\t * \n\t * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such\n\t *   as the instance's {@link #getTagBuilder tag builder}).\n\t * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the\n\t *   {@link Autolinker.match.Url URL}/{@link Autolinker.match.Email email}/{@link Autolinker.match.Twitter Twitter}\n\t *   match that the `replaceFn` is currently processing.\n\t */\n\t\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.htmlParser.HtmlParser} htmlParser\n\t * \n\t * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\n\t * in the {@link #getHtmlParser} method.\n\t */\n\thtmlParser : undefined,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.matchParser.MatchParser} matchParser\n\t * \n\t * The MatchParser instance used to find URL/email/Twitter matches in the text nodes of an input string passed to\n\t * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.\n\t */\n\tmatchParser : undefined,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.AnchorTagBuilder} tagBuilder\n\t * \n\t * The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated\n\t * in the {@link #getTagBuilder} method.\n\t */\n\ttagBuilder : undefined,\n\t\n\t\n\t/**\n\t * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n\t * Does not link URLs found within HTML tags.\n\t * \n\t * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n\t * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n\t * \n\t * This method finds the text around any HTML elements in the input `textOrHtml`, which will be the text that is processed.\n\t * Any original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.\n\t * \n\t * @param {String} textOrHtml The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if\n\t *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n\t * @return {String} The HTML, with URLs/emails/Twitter handles automatically linked.\n\t */\n\tlink : function( textOrHtml ) {\n\t\tvar htmlParser = this.getHtmlParser(),\n\t\t    htmlNodes = htmlParser.parse( textOrHtml ),\n\t\t    anchorTagStackCount = 0,  // used to only process text around anchor tags, and any inner text/html they may have\n\t\t    resultHtml = [];\n\t\t\n\t\tfor( var i = 0, len = htmlNodes.length; i < len; i++ ) {\n\t\t\tvar node = htmlNodes[ i ],\n\t\t\t    nodeType = node.getType(),\n\t\t\t    nodeText = node.getText();\n\t\t\t\n\t\t\tif( nodeType === 'element' ) {\n\t\t\t\t// Process HTML nodes in the input `textOrHtml`\n\t\t\t\tif( node.getTagName() === 'a' ) {\n\t\t\t\t\tif( !node.isClosing() ) {  // it's the start <a> tag\n\t\t\t\t\t\tanchorTagStackCount++;\n\t\t\t\t\t} else {   // it's the end </a> tag\n\t\t\t\t\t\tanchorTagStackCount = Math.max( anchorTagStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresultHtml.push( nodeText );  // now add the text of the tag itself verbatim\n\t\t\t\t\n\t\t\t} else if( nodeType === 'entity' ) {\n\t\t\t\tresultHtml.push( nodeText );  // append HTML entity nodes (such as '&nbsp;') verbatim\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Process text nodes in the input `textOrHtml`\n\t\t\t\tif( anchorTagStackCount === 0 ) {\n\t\t\t\t\t// If we're not within an <a> tag, process the text node to linkify\n\t\t\t\t\tvar linkifiedStr = this.linkifyStr( nodeText );\n\t\t\t\t\tresultHtml.push( linkifiedStr );\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t// `text` is within an <a> tag, simply append the text - we do not want to autolink anything \n\t\t\t\t\t// already within an <a>...</a> tag\n\t\t\t\t\tresultHtml.push( nodeText );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn resultHtml.join( \"\" );\n\t},\n\t\n\t\n\t/**\n\t * Process the text that lies in between HTML tags, performing the anchor tag replacements for matched \n\t * URLs/emails/Twitter handles, and returns the string with the replacements made. \n\t * \n\t * This method does the actual wrapping of URLs/emails/Twitter handles with anchor tags.\n\t * \n\t * @private\n\t * @param {String} str The string of text to auto-link.\n\t * @return {String} The text with anchor tags auto-filled.\n\t */\n\tlinkifyStr : function( str ) {\n\t\treturn this.getMatchParser().replace( str, this.createMatchReturnVal, this );\n\t},\n\t\n\t\n\t/**\n\t * Creates the return string value for a given match in the input string, for the {@link #processTextNode} method.\n\t * \n\t * This method handles the {@link #replaceFn}, if one was provided.\n\t * \n\t * @private\n\t * @param {Autolinker.match.Match} match The Match object that represents the match.\n\t * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but\n\t *   may be the `matchStr` itself if the match is not to be replaced.\n\t */\n\tcreateMatchReturnVal : function( match ) {\n\t\t// Handle a custom `replaceFn` being provided\n\t\tvar replaceFnResult;\n\t\tif( this.replaceFn ) {\n\t\t\treplaceFnResult = this.replaceFn.call( this, this, match );  // Autolinker instance is the context, and the first arg\n\t\t}\n\t\t\n\t\tif( typeof replaceFnResult === 'string' ) {\n\t\t\treturn replaceFnResult;  // `replaceFn` returned a string, use that\n\t\t\t\n\t\t} else if( replaceFnResult === false ) {\n\t\t\treturn match.getMatchedText();  // no replacement for the match\n\t\t\t\n\t\t} else if( replaceFnResult instanceof Autolinker.HtmlTag ) {\n\t\t\treturn replaceFnResult.toString();\n\t\t\n\t\t} else {  // replaceFnResult === true, or no/unknown return value from function\n\t\t\t// Perform Autolinker's default anchor tag generation\n\t\t\tvar tagBuilder = this.getTagBuilder(),\n\t\t\t    anchorTag = tagBuilder.build( match );  // returns an Autolinker.HtmlTag instance\n\t\t\t\n\t\t\treturn anchorTag.toString();\n\t\t}\n\t},\n\t\n\t\n\t/**\n\t * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.\n\t * \n\t * @protected\n\t * @return {Autolinker.htmlParser.HtmlParser}\n\t */\n\tgetHtmlParser : function() {\n\t\tvar htmlParser = this.htmlParser;\n\t\t\n\t\tif( !htmlParser ) {\n\t\t\thtmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\n\t\t}\n\t\t\n\t\treturn htmlParser;\n\t},\n\t\n\t\n\t/**\n\t * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.\n\t * \n\t * @protected\n\t * @return {Autolinker.matchParser.MatchParser}\n\t */\n\tgetMatchParser : function() {\n\t\tvar matchParser = this.matchParser;\n\t\t\n\t\tif( !matchParser ) {\n\t\t\tmatchParser = this.matchParser = new Autolinker.matchParser.MatchParser( {\n\t\t\t\turls : this.urls,\n\t\t\t\temail : this.email,\n\t\t\t\ttwitter : this.twitter,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn matchParser;\n\t},\n\t\n\t\n\t/**\n\t * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\n\t * if it does not yet exist.\n\t * \n\t * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that \n\t * Autolinker would normally generate, and then allow for modifications before returning it. For example:\n\t * \n\t *     var html = Autolinker.link( \"Test google.com\", {\n\t *         replaceFn : function( autolinker, match ) {\n\t *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n\t *             tag.setAttr( 'rel', 'nofollow' );\n\t *             \n\t *             return tag;\n\t *         }\n\t *     } );\n\t *     \n\t *     // generated html:\n\t *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n\t * \n\t * @return {Autolinker.AnchorTagBuilder}\n\t */\n\tgetTagBuilder : function() {\n\t\tvar tagBuilder = this.tagBuilder;\n\t\t\n\t\tif( !tagBuilder ) {\n\t\t\ttagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder( {\n\t\t\t\tnewWindow   : this.newWindow,\n\t\t\t\ttruncate    : this.truncate,\n\t\t\t\tclassName   : this.className\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn tagBuilder;\n\t}\n\n};\n\n\n/**\n * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n * Does not link URLs found within HTML tags.\n * \n * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n * \n * Example:\n * \n *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n * \n * @static\n * @param {String} textOrHtml The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if\n *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n * @param {Object} [options] Any of the configuration options for the Autolinker class, specified in an Object (map).\n *   See the class description for an example call.\n * @return {String} The HTML text, with URLs automatically linked\n */\nAutolinker.link = function( textOrHtml, options ) {\n\tvar autolinker = new Autolinker( options );\n\treturn autolinker.link( textOrHtml );\n};\n\n\n// Autolinker Namespaces\nAutolinker.match = {};\nAutolinker.htmlParser = {};\nAutolinker.matchParser = {};\n/*global Autolinker */\n/*jshint eqnull:true, boss:true */\n/**\n * @class Autolinker.Util\n * @singleton\n * \n * A few utility methods for Autolinker.\n */\nAutolinker.Util = {\n\t\n\t/**\n\t * @property {Function} abstractMethod\n\t * \n\t * A function object which represents an abstract method.\n\t */\n\tabstractMethod : function() { throw \"abstract\"; },\n\t\n\t\n\t/**\n\t * Assigns (shallow copies) the properties of `src` onto `dest`.\n\t * \n\t * @param {Object} dest The destination object.\n\t * @param {Object} src The source object.\n\t * @return {Object} The destination object (`dest`)\n\t */\n\tassign : function( dest, src ) {\n\t\tfor( var prop in src ) {\n\t\t\tif( src.hasOwnProperty( prop ) ) {\n\t\t\t\tdest[ prop ] = src[ prop ];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dest;\n\t},\n\t\n\t\n\t/**\n\t * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\n\t * \n\t * @param {Function} superclass The constructor function for the superclass.\n\t * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\n\t *   special property `constructor`, which will be used as the new subclass's constructor function.\n\t * @return {Function} The new subclass function.\n\t */\n\textend : function( superclass, protoProps ) {\n\t\tvar superclassProto = superclass.prototype;\n\t\t\n\t\tvar F = function() {};\n\t\tF.prototype = superclassProto;\n\t\t\n\t\tvar subclass;\n\t\tif( protoProps.hasOwnProperty( 'constructor' ) ) {\n\t\t\tsubclass = protoProps.constructor;\n\t\t} else {\n\t\t\tsubclass = function() { superclassProto.constructor.apply( this, arguments ); };\n\t\t}\n\t\t\n\t\tvar subclassProto = subclass.prototype = new F();  // set up prototype chain\n\t\tsubclassProto.constructor = subclass;  // fix constructor property\n\t\tsubclassProto.superclass = superclassProto;\n\t\t\n\t\tdelete protoProps.constructor;  // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\n\t\tAutolinker.Util.assign( subclassProto, protoProps );\n\t\t\n\t\treturn subclass;\n\t},\n\t\n\t\n\t/**\n\t * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n\t * end of the string (by default, two periods: '..'). If the `str` length does not exceed \n\t * `len`, the string will be returned unchanged.\n\t * \n\t * @param {String} str The string to truncate and add an ellipsis to.\n\t * @param {Number} truncateLen The length to truncate the string at.\n\t * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`\n\t *   when truncated. Defaults to '..'\n\t */\n\tellipsis : function( str, truncateLen, ellipsisChars ) {\n\t\tif( str.length > truncateLen ) {\n\t\t\tellipsisChars = ( ellipsisChars == null ) ? '..' : ellipsisChars;\n\t\t\tstr = str.substring( 0, truncateLen - ellipsisChars.length ) + ellipsisChars;\n\t\t}\n\t\treturn str;\n\t},\n\t\n\t\n\t/**\n\t * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n\t * \n\t * @param {Array} arr The array to find an element of.\n\t * @param {*} element The element to find in the array, and return the index of.\n\t * @return {Number} The index of the `element`, or -1 if it was not found.\n\t */\n\tindexOf : function( arr, element ) {\n\t\tif( Array.prototype.indexOf ) {\n\t\t\treturn arr.indexOf( element );\n\t\t\t\n\t\t} else {\n\t\t\tfor( var i = 0, len = arr.length; i < len; i++ ) {\n\t\t\t\tif( arr[ i ] === element ) return i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t},\n\t\n\t\n\t\n\t/**\n\t * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n\t * with a regular expression that contains capturing parenthesis.\n\t * \n\t * For example:\n\t * \n\t *     // Modern browsers: \n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n\t *     \n\t *     // Old IE (including IE8):\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n\t *     \n\t * This method emulates the functionality of modern browsers for the old IE case.\n\t * \n\t * @param {String} str The string to split.\n\t * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n\t *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the \n\t *   description of this method. \n\t *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n\t *   Note #2: for simplicity's sake, the regular expression does not need \n\t *   to contain capturing parenthesis - it will be assumed that any match has them.\n\t * @return {String[]} The split array of strings, with the splitting character(s) included.\n\t */\n\tsplitAndCapture : function( str, splitRegex ) {\n\t\tif( !splitRegex.global ) throw new Error( \"`splitRegex` must have the 'g' flag set\" );\n\t\t\n\t\tvar result = [],\n\t\t    lastIdx = 0,\n\t\t    match;\n\t\t\n\t\twhile( match = splitRegex.exec( str ) ) {\n\t\t\tresult.push( str.substring( lastIdx, match.index ) );\n\t\t\tresult.push( match[ 0 ] );  // push the splitting char(s)\n\t\t\t\n\t\t\tlastIdx = match.index + match[ 0 ].length;\n\t\t}\n\t\tresult.push( str.substring( lastIdx ) );\n\t\t\n\t\treturn result;\n\t}\n\t\n};\n/*global Autolinker */\n/*jshint boss:true */\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n * \n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n * \n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n * \n * ## Examples\n * \n * Example instantiation:\n * \n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *     \n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *     \n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n * \n * \n * Using mutator methods (which may be used in combination with instantiation config properties):\n * \n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *     \n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *     \n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *     \n * \n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *     \n *     \n * ## Example use with a new tag for the replacement\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nAutolinker.HtmlTag = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} tagName\n\t * \n\t * The tag name. Ex: 'a', 'button', etc.\n\t * \n\t * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toString}\n\t * is executed.\n\t */\n\t\n\t/**\n\t * @cfg {Object.<String, String>} attrs\n\t * \n\t * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n\t * values are the attribute values.\n\t */\n\t\n\t/**\n\t * @cfg {String} innerHtml\n\t * \n\t * The inner HTML for the tag. \n\t * \n\t * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym \n\t * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\n\t * if you prefer, but this one is recommended.\n\t */\n\t\n\t/**\n\t * @cfg {String} innerHTML\n\t * \n\t * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\n\t * for acronym names.\n\t */\n\t\n\t\n\t/**\n\t * @protected\n\t * @property {RegExp} whitespaceRegex\n\t * \n\t * Regular expression used to match whitespace in a string of CSS classes.\n\t */\n\twhitespaceRegex : /\\s+/,\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t\t\n\t\tthis.innerHtml = this.innerHtml || this.innerHTML;  // accept either the camelCased form or the fully capitalized acronym\n\t},\n\t\n\t\n\t/**\n\t * Sets the tag name that will be used to generate the tag with.\n\t * \n\t * @param {String} tagName\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetTagName : function( tagName ) {\n\t\tthis.tagName = tagName;\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the tag name.\n\t * \n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Sets an attribute on the HtmlTag.\n\t * \n\t * @param {String} attrName The attribute name to set.\n\t * @param {String} attrValue The attribute value to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttr : function( attrName, attrValue ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\ttagAttrs[ attrName ] = attrValue;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n\t * \n\t * @param {String} name The attribute name to retrieve.\n\t * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n\t */\n\tgetAttr : function( attrName ) {\n\t\treturn this.getAttrs()[ attrName ];\n\t},\n\t\n\t\n\t/**\n\t * Sets one or more attributes on the HtmlTag.\n\t * \n\t * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttrs : function( attrs ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\tAutolinker.Util.assign( tagAttrs, attrs );\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the attributes Object (map) for the HtmlTag.\n\t * \n\t * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n\t */\n\tgetAttrs : function() {\n\t\treturn this.attrs || ( this.attrs = {} );\n\t},\n\t\n\t\n\t/**\n\t * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetClass : function( cssClass ) {\n\t\treturn this.setAttr( 'class', cssClass );\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to add.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\taddClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    newClasses = cssClass.split( whitespaceRegex ),\n\t\t    newClass;\n\t\t\n\t\twhile( newClass = newClasses.shift() ) {\n\t\t\tif( indexOf( classes, newClass ) === -1 ) {\n\t\t\t\tclasses.push( newClass );\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to remove one or more CSS classes from the HtmlTag.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to remove.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tremoveClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    removeClasses = cssClass.split( whitespaceRegex ),\n\t\t    removeClass;\n\t\t\n\t\twhile( classes.length && ( removeClass = removeClasses.shift() ) ) {\n\t\t\tvar idx = indexOf( classes, removeClass );\n\t\t\tif( idx !== -1 ) {\n\t\t\t\tclasses.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n\t * there are multiple.\n\t * \n\t * @return {String}\n\t */\n\tgetClass : function() {\n\t\treturn this.getAttrs()[ 'class' ] || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to check if the tag has a CSS class or not.\n\t * \n\t * @param {String} cssClass The CSS class to check for.\n\t * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n\t */\n\thasClass : function( cssClass ) {\n\t\treturn ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;\n\t},\n\t\n\t\n\t/**\n\t * Sets the inner HTML for the tag.\n\t * \n\t * @param {String} html The inner HTML to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetInnerHtml : function( html ) {\n\t\tthis.innerHtml = html;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the inner HTML for the tag.\n\t * \n\t * @return {String}\n\t */\n\tgetInnerHtml : function() {\n\t\treturn this.innerHtml || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Override of superclass method used to generate the HTML string for the tag.\n\t * \n\t * @return {String}\n\t */\n\ttoString : function() {\n\t\tvar tagName = this.getTagName(),\n\t\t    attrsStr = this.buildAttrsStr();\n\t\t\n\t\tattrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes\n\t\t\n\t\treturn [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( \"\" );\n\t},\n\t\n\t\n\t/**\n\t * Support method for {@link #toString}, returns the string space-separated key=\"value\" pairs, used to populate \n\t * the stringified HtmlTag.\n\t * \n\t * @protected\n\t * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n\t */\n\tbuildAttrsStr : function() {\n\t\tif( !this.attrs ) return \"\";  // no `attrs` Object (map) has been set, return empty string\n\t\t\n\t\tvar attrs = this.getAttrs(),\n\t\t    attrsArr = [];\n\t\t\n\t\tfor( var prop in attrs ) {\n\t\t\tif( attrs.hasOwnProperty( prop ) ) {\n\t\t\t\tattrsArr.push( prop + '=\"' + attrs[ prop ] + '\"' );\n\t\t\t}\n\t\t}\n\t\treturn attrsArr.join( \" \" );\n\t}\n\t\n} );\n/*global Autolinker */\n/*jshint sub:true */\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n * \n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.\n * \n * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may \n * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances\n * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr( 'rel', 'nofollow' );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\nAutolinker.AnchorTagBuilder = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * @inheritdoc Autolinker#newWindow\n\t */\n\t\n\t/**\n\t * @cfg {Number} truncate\n\t * @inheritdoc Autolinker#truncate\n\t */\n\t\n\t/**\n\t * @cfg {String} className\n\t * @inheritdoc Autolinker#className\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\t\n\t\n\t/**\n\t * Generates the actual anchor (&lt;a&gt;) tag to use in place of the matched URL/email/Twitter text,\n\t * via its `match` object.\n\t * \n\t * @param {Autolinker.match.Match} match The Match instance to generate an anchor tag from.\n\t * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n\t */\n\tbuild : function( match ) {\n\t\tvar tag = new Autolinker.HtmlTag( {\n\t\t\ttagName   : 'a',\n\t\t\tattrs     : this.createAttrs( match.getType(), match.getAnchorHref() ),\n\t\t\tinnerHtml : this.processAnchorText( match.getAnchorText() )\n\t\t} );\n\t\t\n\t\treturn tag;\n\t},\n\t\n\t\n\t/**\n\t * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;) tag being generated.\n\t * \n\t * @protected\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @param {String} href The href for the anchor tag.\n\t * @return {Object} A key/value Object (map) of the anchor tag's attributes. \n\t */\n\tcreateAttrs : function( matchType, anchorHref ) {\n\t\tvar attrs = {\n\t\t\t'href' : anchorHref  // we'll always have the `href` attribute\n\t\t};\n\t\t\n\t\tvar cssClass = this.createCssClass( matchType );\n\t\tif( cssClass ) {\n\t\t\tattrs[ 'class' ] = cssClass;\n\t\t}\n\t\tif( this.newWindow ) {\n\t\t\tattrs[ 'target' ] = \"_blank\";\n\t\t}\n\t\t\n\t\treturn attrs;\n\t},\n\t\n\t\n\t/**\n\t * Creates the CSS class that will be used for a given anchor tag, based on the `matchType` and the {@link #className}\n\t * config.\n\t * \n\t * @private\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @return {String} The CSS class string for the link. Example return: \"myLink myLink-url\". If no {@link #className}\n\t *   was configured, returns an empty string.\n\t */\n\tcreateCssClass : function( matchType ) {\n\t\tvar className = this.className;\n\t\t\n\t\tif( !className ) \n\t\t\treturn \"\";\n\t\telse\n\t\t\treturn className + \" \" + className + \"-\" + matchType;  // ex: \"myLink myLink-url\", \"myLink myLink-email\", or \"myLink myLink-twitter\"\n\t},\n\t\n\t\n\t/**\n\t * Processes the `anchorText` by truncating the text according to the {@link #truncate} config.\n\t * \n\t * @private\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The processed `anchorText`.\n\t */\n\tprocessAnchorText : function( anchorText ) {\n\t\tanchorText = this.doTruncate( anchorText );\n\t\t\n\t\treturn anchorText;\n\t},\n\t\n\t\n\t/**\n\t * Performs the truncation of the `anchorText`, if the `anchorText` is longer than the {@link #truncate} option.\n\t * Truncates the text to 2 characters fewer than the {@link #truncate} option, and adds \"..\" to the end.\n\t * \n\t * @private\n\t * @param {String} text The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The truncated anchor text.\n\t */\n\tdoTruncate : function( anchorText ) {\n\t\treturn Autolinker.Util.ellipsis( anchorText, this.truncate || Number.POSITIVE_INFINITY );\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.htmlParser.HtmlParser\n * @extends Object\n * \n * An HTML parser implementation which simply walks an HTML string and returns an array of \n * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\n * \n * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / \"walking\n * around\" HTML tags.\n */\nAutolinker.htmlParser.HtmlParser = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} htmlRegex\n\t * \n\t * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\n\t * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.\n\t * \n\t * Capturing groups:\n\t * \n\t * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\n\t * 2. If it is an end tag, this group will have the '/'.\n\t * 3. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)\n\t */\n\thtmlRegex : (function() {\n\t\tvar tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\n\t\t    attrNameRegex = /[^\\s\\0\"'>\\/=\\x01-\\x1F\\x7F]+/,   // the unicode range accounts for excluding control chars, and the delete char\n\t\t    attrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/, // double quoted, single quoted, or unquoted attribute values\n\t\t    nameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?';  // optional '=[value]'\n\t\t\n\t\treturn new RegExp( [\n\t\t\t// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n\t\t\t'(?:',\n\t\t\t\t'<(!DOCTYPE)',  // *** Capturing Group 1 - If it's a doctype tag\n\t\t\t\t\t\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',  // one or more whitespace chars before an attribute\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Either:\n\t\t\t\t\t\t// A. attr=\"value\", or \n\t\t\t\t\t\t// B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n\t\t\t\t\t\t'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')',\n\t\t\t\t\t')*',\n\t\t\t\t'>',\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t// All other HTML tags (i.e. tags that are not <!DOCTYPE>)\n\t\t\t'(?:',\n\t\t\t\t'<(/)?',  // Beginning of a tag. Either '<' for a start tag, or '</' for an end tag. \n\t\t\t\t          // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\n\t\t\t\n\t\t\t\t\t// *** Capturing Group 3 - The tag name\n\t\t\t\t\t'(' + tagNameRegex.source + ')',\n\t\t\t\t\t\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',                // one or more whitespace chars before an attribute\n\t\t\t\t\t\tnameEqualsValueRegex,  // attr=\"value\" (with optional =\"value\" part)\n\t\t\t\t\t')*',\n\t\t\t\t\t\n\t\t\t\t\t'\\\\s*/?',  // any trailing spaces and optional '/' before the closing '>'\n\t\t\t\t'>',\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} htmlCharacterEntitiesRegex\n\t *\n\t * The regular expression that matches common HTML character entities.\n\t * \n\t * Ignoring &amp; as it could be part of a query string -- handling it separately.\n\t */\n\thtmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\n\t\n\t\n\t/**\n\t * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes} to represent\n\t * the HTML structure of the input string. \n\t * \n\t * @param {String} html The HTML to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]}\n\t */\n\tparse : function( html ) {\n\t\tvar htmlRegex = this.htmlRegex,\n\t\t    currentResult,\n\t\t    lastIndex = 0,\n\t\t    textAndEntityNodes,\n\t\t    nodes = [];  // will be the result of the method\n\t\t\n\t\twhile( ( currentResult = htmlRegex.exec( html ) ) !== null ) {\n\t\t\tvar tagText = currentResult[ 0 ],\n\t\t\t    tagName = currentResult[ 1 ] || currentResult[ 3 ],  // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\") \n\t\t\t    isClosingTag = !!currentResult[ 2 ],\n\t\t\t    inBetweenTagsText = html.substring( lastIndex, currentResult.index );\n\t\t\t\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( inBetweenTagsText ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( inBetweenTagsText );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\t\t\t\n\t\t\t// Push the ElementNode\n\t\t\tnodes.push( this.createElementNode( tagText, tagName, isClosingTag ) );\n\t\t\t\n\t\t\tlastIndex = currentResult.index + tagText.length;\n\t\t}\n\t\t\n\t\t// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\n\t\tif( lastIndex < html.length ) {\n\t\t\tvar text = html.substring( lastIndex );\n\t\t\t\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( text ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( text );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn nodes;\n\t},\n\t\n\t\n\t/**\n\t * Parses text and HTML entity nodes from a given string. The input string should not have any HTML tags (elements)\n\t * within it.\n\t * \n\t * @private\n\t * @param {String} text The text to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to represent the \n\t *   {@link Autolinker.htmlParser.TextNode TextNodes} and {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\n\t */\n\tparseTextAndEntityNodes : function( text ) {\n\t\tvar nodes = [],\n\t\t    textAndEntityTokens = Autolinker.Util.splitAndCapture( text, this.htmlCharacterEntitiesRegex );  // split at HTML entities, but include the HTML entities in the results array\n\t\t\n\t\t// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\n\t\t// For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the \n\t\t//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\n\t\tfor( var i = 0, len = textAndEntityTokens.length; i < len; i += 2 ) {\n\t\t\tvar textToken = textAndEntityTokens[ i ],\n\t\t\t    entityToken = textAndEntityTokens[ i + 1 ];\n\t\t\t\n\t\t\tif( textToken ) nodes.push( this.createTextNode( textToken ) );\n\t\t\tif( entityToken ) nodes.push( this.createEntityNode( entityToken ) );\n\t\t}\n\t\treturn nodes;\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\n\t * \n\t * @private\n\t * @param {String} tagText The full text of the tag (element) that was matched, including its attributes.\n\t * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would be passed to this method as \"img\".\n\t * @param {Boolean} isClosingTag `true` if it's a closing tag, false otherwise.\n\t * @return {Autolinker.htmlParser.ElementNode}\n\t */\n\tcreateElementNode : function( tagText, tagName, isClosingTag ) {\n\t\treturn new Autolinker.htmlParser.ElementNode( {\n\t\t\ttext    : tagText,\n\t\t\ttagName : tagName.toLowerCase(),\n\t\t\tclosing : isClosingTag\n\t\t} );\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\n\t * \n\t * @private\n\t * @param {String} text The text that was matched for the HTML entity (such as '&amp;nbsp;').\n\t * @return {Autolinker.htmlParser.EntityNode}\n\t */\n\tcreateEntityNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.EntityNode( { text: text } );\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\n\t * \n\t * @private\n\t * @param {String} text The text that was matched.\n\t * @return {Autolinker.htmlParser.TextNode}\n\t */\n\tcreateTextNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.TextNode( { text: text } );\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.htmlParser.HtmlNode\n * \n * Represents an HTML node found in an input string. An HTML node is one of the following:\n * \n * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.\n * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.\n * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML\n *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;\n */\nAutolinker.htmlParser.HtmlNode = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} text (required)\n\t * \n\t * The original text that was matched for the HtmlNode. \n\t * \n\t * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's\n\t *   text.\n\t * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.\n\t * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of\n\t *   the HTML entity.\n\t */\n\ttext : \"\",\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Retrieves the {@link #text} for the HtmlNode.\n\t * \n\t * @return {String}\n\t */\n\tgetText : function() {\n\t\treturn this.text;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.ElementNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.ElementNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * @cfg {String} tagName (required)\n\t * \n\t * The name of the tag that was matched.\n\t */\n\ttagName : '',\n\t\n\t/**\n\t * @cfg {Boolean} closing (required)\n\t * \n\t * `true` if the element (tag) is a closing tag, `false` if its an opening tag.\n\t */\n\tclosing : false,\n\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'element';\n\t},\n\t\n\n\t/**\n\t * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns \"img\".\n\t * \n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName;\n\t},\n\t\n\t\n\t/**\n\t * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns\n\t * `false`, while &lt;/div&gt; returns `true`.\n\t * \n\t * @return {Boolean}\n\t */\n\tisClosing : function() {\n\t\treturn this.closing;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.EntityNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.\n * \n * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes \n * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.EntityNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'entity';\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.TextNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.TextNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'text';\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.matchParser.MatchParser\n * @extends Object\n * \n * Used by Autolinker to parse {@link #urls URLs}, {@link #emails email addresses}, and {@link #twitter Twitter handles}, \n * given an input string of text.\n * \n * The MatchParser is fed a non-HTML string in order to search out URLs, email addresses and Twitter handles. Autolinker\n * first uses the {@link HtmlParser} to \"walk around\" HTML tags, and then the text around the HTML tags is passed into\n * the MatchParser in order to find the actual matches.\n */\nAutolinker.matchParser.MatchParser = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {Boolean} urls\n\t * \n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\t\n\t/**\n\t * @cfg {Boolean} email\n\t * \n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\t\n\t/**\n\t * @cfg {Boolean} twitter\n\t * \n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t * \n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text\n\t * in {@link Autolinker.match.Url URL matches}, `false` otherwise.\n\t * \n\t * TODO: Handle this before a URL Match object is instantiated.\n\t */\n\tstripPrefix : true,\n\t\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} matcherRegex\n\t * \n\t * The regular expression that matches URLs, email addresses, and Twitter handles.\n\t * \n\t * This regular expression has the following capturing groups:\n\t * \n\t * 1. Group that is used to determine if there is a Twitter handle match (i.e. \\@someTwitterUser). Simply check for its \n\t *    existence to determine if there is a Twitter handle match. The next couple of capturing groups give information \n\t *    about the Twitter handle match.\n\t * 2. The whitespace character before the \\@sign in a Twitter handle. This is needed because there are no lookbehinds in\n\t *    JS regular expressions, and can be used to reconstruct the original string in a replace().\n\t * 3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.\n\t * 4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full \n\t *    address. Ex: 'me@my.com'\n\t * 5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.\n\t *    This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor\n\t * 6. Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single\n\t *    word, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * 7. A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a \n\t *    protocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match\n\t *    or the // was in a string we don't want to auto-link.\n\t * 8. A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a \n\t *    protocol-relative match. See #6 for more info. \n\t */\n\tmatcherRegex : (function() {\n\t\tvar twitterRegex = /(^|[^\\w])@(\\w{1,15})/,              // For matching a twitter handle. Ex: @gregory_jacobs\n\t\t    \n\t\t    emailRegex = /(?:[\\-;:&=\\+\\$,\\w\\.]+@)/,             // something@ for email addresses (a.k.a. local-part)\n\t\t    \n\t\t    protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\t    wwwRegex = /(?:www\\.)/,                             // starting with 'www.'\n\t\t    domainNameRegex = /[A-Za-z0-9\\.\\-]*[A-Za-z0-9\\-]/,  // anything looking at all like a domain, non-unicode domains, not ending in a period\n\t\t    tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/,   // match our known top level domains (TLDs)\n\t\t    \n\t\t    // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t    // http://blog.codinghorror.com/the-problem-with-urls/\n\t\t    urlSuffixRegex = /[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]?!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]]/;\n\t\t\n\t\treturn new RegExp( [\n\t\t\t'(',  // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace() \n\t\t\t\t// *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and \n\t\t\t\t// *** Capturing group $3, which matches the actual twitter handle\n\t\t\t\ttwitterRegex.source,\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t'(',  // *** Capturing group $4, which is used to determine an email match\n\t\t\t\temailRegex.source,\n\t\t\t\tdomainNameRegex.source,\n\t\t\t\ttldRegex.source,\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t'(',  // *** Capturing group $5, which is used to match a URL\n\t\t\t\t'(?:', // parens to cover match for protocol (optional), and domain\n\t\t\t\t\t'(',  // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)\n\t\t\t\t\t\tprotocolRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t\t\n\t\t\t\t\t'|',\n\t\t\t\t\t\n\t\t\t\t\t'(?:',  // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\twwwRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t\t\n\t\t\t\t\t'|',\n\t\t\t\t\t\n\t\t\t\t\t'(?:',  // non-capturing paren for known a TLD url (ex: google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t\ttldRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t')',\n\t\t\t\t\n\t\t\t\t'(?:' + urlSuffixRegex.source + ')?',  // match for path, query string, and/or hash anchor - optional\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} charBeforeProtocolRelMatchRegex\n\t * \n\t * The regular expression used to retrieve the character before a protocol-relative URL match.\n\t * \n\t * This is used in conjunction with the {@link #matcherRegex}, which needs to grab the character before a protocol-relative\n\t * '//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped\n\t * from the URL.\n\t */\n\tcharBeforeProtocolRelMatchRegex : /^(.)?\\/\\//,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.MatchValidator} matchValidator\n\t * \n\t * The MatchValidator object, used to filter out any false positives from the {@link #matcherRegex}. See\n\t * {@link Autolinker.MatchValidator} for details.\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t\n\t\tthis.matchValidator = new Autolinker.MatchValidator();\n\t},\n\t\n\t\n\t/**\n\t * Parses the input `text` to search for URLs/emails/Twitter handles, and calls the `replaceFn`\n\t * to allow replacements of the matches. Returns the `text` with matches replaced.\n\t * \n\t * @param {String} text The text to search and repace matches in.\n\t * @param {Function} replaceFn The iterator function to handle the replacements. The function takes a\n\t *   single argument, a {@link Autolinker.match.Match} object, and should return the text that should\n\t *   make the replacement.\n\t * @param {Object} [contextObj=window] The context object (\"scope\") to run the `replaceFn` in.\n\t * @return {String}\n\t */\n\treplace : function( text, replaceFn, contextObj ) {\n\t\tvar me = this;  // for closure\n\t\t\n\t\treturn text.replace( this.matcherRegex, function( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 ) {\n\t\t\tvar matchDescObj = me.processCandidateMatch( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 );  // \"match description\" object\n\t\t\t\n\t\t\t// Return out with no changes for match types that are disabled (url, email, twitter), or for matches that are \n\t\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\t\tif( !matchDescObj ) {\n\t\t\t\treturn matchStr;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Generate replacement text for the match from the `replaceFn`\n\t\t\t\tvar replaceStr = replaceFn.call( contextObj, matchDescObj.match );\n\t\t\t\treturn matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;\n\t\t\t}\n\t\t} );\n\t},\n\t\n\t\n\t/**\n\t * Processes a candidate match from the {@link #matcherRegex}. \n\t * \n\t * Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the {@link #matchValidator}. In\n\t * this case, the method returns `null`. Otherwise, a valid Object with `prefixStr`, `match`, and `suffixStr` is returned.\n\t * \n\t * @private\n\t * @param {String} matchStr The full match that was found by the {@link #matcherRegex}.\n\t * @param {String} twitterMatch The matched text of a Twitter handle, if the match is a Twitter match.\n\t * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char before the @ sign in a Twitter handle match. This \n\t *   is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.\n\t * @param {String} twitterHandle The actual Twitter user (i.e the word after the @ sign in a Twitter match).\n\t * @param {String} emailAddressMatch The matched email address for an email address match.\n\t * @param {String} urlMatch The matched URL string for a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative match from a 'www' url, with the character that \n\t *   comes before the '//'.\n\t * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative match from a TLD (top level domain) match, with \n\t *   the character that comes before the '//'.\n\t *   \n\t * @return {Object} A \"match description object\". This will be `null` if the match was invalid, or if a match type is disabled.\n\t *   Otherwise, this will be an Object (map) with the following properties:\n\t * @return {String} return.prefixStr The char(s) that should be prepended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n\t *   the replacement stream.\n\t * @return {String} return.suffixStr The char(s) that should be appended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n\t *   the replacement stream.\n\t * @return {Autolinker.match.Match} return.match The Match object that represents the match that was found.\n\t */\n\tprocessCandidateMatch : function( \n\t\tmatchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle, \n\t\temailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch\n\t) {\n\t\t// Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will \n\t\t// be added to `prefixStr` and `suffixStr`).\n\t\t\n\t\tvar protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t    match,  // Will be an Autolinker.match.Match object\n\t\t    \n\t\t    prefixStr = \"\",       // A string to use to prefix the anchor tag that is created. This is needed for the Twitter handle match\n\t\t    suffixStr = \"\";       // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.\n\t\t    \n\t\t\n\t\t// Return out with `null` for match types that are disabled (url, email, twitter), or for matches that are \n\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\tif(\n\t\t\t( twitterMatch && !this.twitter ) || ( emailAddressMatch && !this.email ) || ( urlMatch && !this.urls ) ||\n\t\t\t!this.matchValidator.isValidMatch( urlMatch, protocolUrlMatch, protocolRelativeMatch ) \n\t\t) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// Handle a closing parenthesis at the end of the match, and exclude it if there is not a matching open parenthesis\n\t\t// in the match itself. \n\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\n\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\n\t\t\tsuffixStr = \")\";  // this will be added after the generated <a> tag\n\t\t}\n\t\t\n\t\t\n\t\tif( emailAddressMatch ) {\n\t\t\tmatch = new Autolinker.match.Email( { matchedText: matchStr, email: emailAddressMatch } );\n\t\t\t\n\t\t} else if( twitterMatch ) {\n\t\t\t// fix up the `matchStr` if there was a preceding whitespace char, which was needed to determine the match \n\t\t\t// itself (since there are no look-behinds in JS regexes)\n\t\t\tif( twitterHandlePrefixWhitespaceChar ) {\n\t\t\t\tprefixStr = twitterHandlePrefixWhitespaceChar;\n\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match\n\t\t\t}\n\t\t\tmatch = new Autolinker.match.Twitter( { matchedText: matchStr, twitterHandle: twitterHandle } );\n\t\t\t\n\t\t} else {  // url match\n\t\t\t// If it's a protocol-relative '//' match, remove the character before the '//' (which the matcherRegex needed\n\t\t\t// to match due to the lack of a negative look-behind in JavaScript regular expressions)\n\t\t\tif( protocolRelativeMatch ) {\n\t\t\t\tvar charBeforeMatch = protocolRelativeMatch.match( this.charBeforeProtocolRelMatchRegex )[ 1 ] || \"\";\n\t\t\t\t\n\t\t\t\tif( charBeforeMatch ) {  // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n\t\t\t\t\tprefixStr = charBeforeMatch;\n\t\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed char from the match\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmatch = new Autolinker.match.Url( {\n\t\t\t\tmatchedText : matchStr,\n\t\t\t\turl : matchStr,\n\t\t\t\tprotocolUrlMatch : !!protocolUrlMatch,\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tprefixStr : prefixStr,\n\t\t\tsuffixStr : suffixStr,\n\t\t\tmatch     : match\n\t\t};\n\t},\n\t\n\t\n\t/**\n\t * Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed\n\t * from the match itself, and appended after the generated anchor tag in {@link #processTextNode}.\n\t * \n\t * A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis\n\t * for URLs such as \"wikipedia.com/something_(disambiguation)\", which should be auto-linked. \n\t * \n\t * However, an extra parenthesis *will* be included when the URL itself is wrapped in parenthesis, such as in the case of\n\t * \"(wikipedia.com/something_(disambiguation))\". In this case, the last closing parenthesis should *not* be part of the URL \n\t * itself, and this method will return `true`.\n\t * \n\t * @private\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis at the end of the `matchStr`, `false` otherwise.\n\t */\n\tmatchHasUnbalancedClosingParen : function( matchStr ) {\n\t\tvar lastChar = matchStr.charAt( matchStr.length - 1 );\n\t\t\n\t\tif( lastChar === ')' ) {\n\t\t\tvar openParensMatch = matchStr.match( /\\(/g ),\n\t\t\t    closeParensMatch = matchStr.match( /\\)/g ),\n\t\t\t    numOpenParens = ( openParensMatch && openParensMatch.length ) || 0,\n\t\t\t    numCloseParens = ( closeParensMatch && closeParensMatch.length ) || 0;\n\t\t\t\n\t\t\tif( numOpenParens < numCloseParens ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n} );\n/*global Autolinker */\n/*jshint scripturl:true */\n/**\n * @private\n * @class Autolinker.MatchValidator\n * @extends Object\n * \n * Used by Autolinker to filter out false positives from the {@link Autolinker#matcherRegex}.\n * \n * Due to the limitations of regular expressions (including the missing feature of look-behinds in JS regular expressions),\n * we cannot always determine the validity of a given match. This class applies a bit of additional logic to filter out any\n * false positives that have been matched by the {@link Autolinker#matcherRegex}.\n */\nAutolinker.MatchValidator = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} invalidProtocolRelMatchRegex\n\t * \n\t * The regular expression used to check a potential protocol-relative URL match, coming from the \n\t * {@link Autolinker#matcherRegex}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t * \n\t * This regular expression checks to see if there is a word character before the '//' match in order to determine if \n\t * we should actually autolink a protocol-relative URL. This is needed because there is no negative look-behind in \n\t * JavaScript regular expressions. \n\t * \n\t * For instance, we want to autolink something like \"Go to: //google.com\", but we don't want to autolink something \n\t * like \"abc//google.com\"\n\t */\n\tinvalidProtocolRelMatchRegex : /^[\\w]\\/\\//,\n\t\n\t/**\n\t * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n\t * \n\t * @private\n\t * @property {RegExp} hasFullProtocolRegex\n\t */\n\thasFullProtocolRegex : /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//,\n\t\n\t/**\n\t * Regex to find the URI scheme, such as 'mailto:'.\n\t * \n\t * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n\t * \n\t * @private\n\t * @property {RegExp} uriSchemeRegex\n\t */\n\turiSchemeRegex : /^[A-Za-z][-.+A-Za-z0-9]+:/,\n\t\n\t/**\n\t * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n\t * \n\t * @private\n\t * @property {RegExp} hasWordCharAfterProtocolRegex\n\t */\n\thasWordCharAfterProtocolRegex : /:[^\\s]*?[A-Za-z]/,\n\t\n\t\n\t/**\n\t * Determines if a given match found by {@link Autolinker#processTextNode} is valid. Will return `false` for:\n\t * \n\t * 1) URL matches which do not have at least have one period ('.') in the domain name (effectively skipping over \n\t *    matches like \"abc:def\"). However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n\t * 2) URL matches which do not have at least one word character in the domain name (effectively skipping over\n\t *    matches like \"git:1.0\").\n\t * 3) A protocol-relative url match (a URL beginning with '//') whose previous character is a word character \n\t *    (effectively skipping over strings like \"abc//google.com\")\n\t * \n\t * Otherwise, returns `true`.\n\t * \n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if the match given is valid and should be processed, or `false` if the match is invalid and/or \n\t *   should just not be processed.\n\t */\n\tisValidMatch : function( urlMatch, protocolUrlMatch, protocolRelativeMatch ) {\n\t\tif(\n\t\t\t( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||\n\t\t\tthis.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||       // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n\t\t\tthis.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) ||  // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n\t\t\tthis.isInvalidProtocolRelativeMatch( protocolRelativeMatch )                 // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t\n\t/**\n\t * Determines if the URI scheme is a valid scheme to be autolinked. Returns `false` if the scheme is \n\t * 'javascript:' or 'vbscript:'\n\t * \n\t * @private\n\t * @param {String} uriSchemeMatch The match URL string for a full URI scheme match. Ex: 'http://yahoo.com' \n\t *   or 'mailto:a@a.com'.\n\t * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n\t */\n\tisValidUriScheme : function( uriSchemeMatch ) {\n\t\tvar uriScheme = uriSchemeMatch.match( this.uriSchemeRegex )[ 0 ].toLowerCase();\n\t\t\n\t\treturn ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );\n\t},\n\t\n\t\n\t/**\n\t * Determines if a URL match does not have either:\n\t * \n\t * a) a full protocol (i.e. 'http://'), or\n\t * b) at least one dot ('.') in the domain name (for a non-full-protocol match).\n\t * \n\t * Either situation is considered an invalid URL (ex: 'git:d' does not have either the '://' part, or at least one dot\n\t * in the domain name. If the match was 'git:abc.com', we would consider this valid.)\n\t * \n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @return {Boolean} `true` if the URL match does not have a full protocol, or at least one dot ('.') in a non-full-protocol\n\t *   match.\n\t */\n\turlMatchDoesNotHaveProtocolOrDot : function( urlMatch, protocolUrlMatch ) {\n\t\treturn ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );\n\t},\n\t\n\t\n\t/**\n\t * Determines if a URL match does not have at least one word character after the protocol (i.e. in the domain name).\n\t * \n\t * At least one letter character must exist in the domain name after a protocol match. Ex: skip over something \n\t * like \"git:1.0\"\n\t * \n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to\n\t *   know whether or not we have a protocol in the URL string, in order to check for a word character after the protocol\n\t *   separator (':').\n\t * @return {Boolean} `true` if the URL match does not have at least one word character in it after the protocol, `false`\n\t *   otherwise.\n\t */\n\turlMatchDoesNotHaveAtLeastOneWordChar : function( urlMatch, protocolUrlMatch ) {\n\t\tif( urlMatch && protocolUrlMatch ) {\n\t\t\treturn !this.hasWordCharAfterProtocolRegex.test( urlMatch );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t\n\t\n\t/**\n\t * Determines if a protocol-relative match is an invalid one. This method returns `true` if there is a `protocolRelativeMatch`,\n\t * and that match contains a word character before the '//' (i.e. it must contain whitespace or nothing before the '//' in\n\t * order to be considered valid).\n\t * \n\t * @private\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if it is an invalid protocol-relative match, `false` otherwise.\n\t */\n\tisInvalidProtocolRelativeMatch : function( protocolRelativeMatch ) {\n\t\treturn ( !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test( protocolRelativeMatch ) );\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.match.Match\n * \n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a \n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n * \n * For example:\n * \n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *     \n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *         \n *             switch( match.getType() ) {\n *                 case 'url' : \n *                     console.log( \"url: \", match.getUrl() );\n *                     \n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *                     \n *                 case 'twitter' :\n *                     console.log( \"twitter: \", match.getTwitterHandle() );\n *             }\n *         }\n *     } );\n *     \n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nAutolinker.match.Match = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} matchedText (required)\n\t * \n\t * The original text that was matched.\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\t\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Returns the original text that was matched.\n\t * \n\t * @return {String}\n\t */\n\tgetMatchedText : function() {\n\t\treturn this.matchedText;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorHref : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorText : Autolinker.Util.abstractMethod\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Email\n * @extends Autolinker.match.Match\n * \n * Represents a Email match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Email = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} email (required)\n\t * \n\t * The email address that was matched.\n\t */\n\t\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'email';\n\t},\n\t\n\t\n\t/**\n\t * Returns the email address that was matched.\n\t * \n\t * @return {String}\n\t */\n\tgetEmail : function() {\n\t\treturn this.email;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'mailto:' + this.email;\n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn this.email;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Twitter\n * @extends Autolinker.match.Match\n * \n * Represents a Twitter match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Twitter = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} twitterHandle (required)\n\t * \n\t * The Twitter handle that was matched.\n\t */\n\t\n\n\t/**\n\t * Returns the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'twitter';\n\t},\n\t\n\t\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetTwitterHandle : function() {\n\t\treturn this.twitterHandle;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'https://twitter.com/' + this.twitterHandle;\n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn '@' + this.twitterHandle;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n * \n * Represents a Url match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Url = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} url (required)\n\t * \n\t * The url that was matched.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} protocolUrlMatch (required)\n\t * \n\t * `true` if the URL is a match which already has a protocol (i.e. 'http://'), `false` if the match was from a 'www' or\n\t * known TLD match.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} protocolRelativeMatch (required)\n\t * \n\t * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',\n\t * and will be either http:// or https:// based on the protocol that the site is loaded under.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix (required)\n\t * @inheritdoc Autolinker#stripPrefix\n\t */\n\t\n\n\t/**\n\t * @private\n\t * @property {RegExp} urlPrefixRegex\n\t * \n\t * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n\t */\n\turlPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} protocolRelativeRegex\n\t * \n\t * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n\t * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t */\n\tprotocolRelativeRegex : /^\\/\\//,\n\t\n\t/**\n\t * @private\n\t * @property {Boolean} protocolPrepended\n\t * \n\t * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n\t * {@link #url} did not have a protocol)\n\t */\n\tprotocolPrepended : false,\n\t\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'url';\n\t},\n\t\n\t\n\t/**\n\t * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n\t * match was missing a protocol.\n\t * \n\t * @return {String}\n\t */\n\tgetUrl : function() {\n\t\tvar url = this.url;\n\t\t\n\t\t// if the url string doesn't begin with a protocol, assume 'http://'\n\t\tif( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {\n\t\t\turl = this.url = 'http://' + url;\n\t\t\t\n\t\t\tthis.protocolPrepended = true;\n\t\t}\n\t\t\n\t\treturn url;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\tvar url = this.getUrl();\n\t\t\n\t\treturn url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html \n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\tvar anchorText = this.getUrl();\n\t\t\n\t\tif( this.protocolRelativeMatch ) {\n\t\t\t// Strip off any protocol-relative '//' from the anchor text\n\t\t\tanchorText = this.stripProtocolRelativePrefix( anchorText );\n\t\t}\n\t\tif( this.stripPrefix ) {\n\t\t\tanchorText = this.stripUrlPrefix( anchorText );\n\t\t}\n\t\tanchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one\n\t\t\n\t\treturn anchorText;\n\t},\n\t\n\t\n\t// ---------------------------------------\n\t\n\t// Utility Functionality\n\t\n\t/**\n\t * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n\t * \n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   url prefix (such as stripping off \"http://\")\n\t * @return {String} The `anchorText`, with the prefix stripped.\n\t */\n\tstripUrlPrefix : function( text ) {\n\t\treturn text.replace( this.urlPrefixRegex, '' );\n\t},\n\t\n\t\n\t/**\n\t * Strips any protocol-relative '//' from the anchor text.\n\t * \n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   protocol-relative prefix (such as stripping off \"//\")\n\t * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n\t */\n\tstripProtocolRelativePrefix : function( text ) {\n\t\treturn text.replace( this.protocolRelativeRegex, '' );\n\t},\n\t\n\t\n\t/**\n\t * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n\t * \n\t * @private\n\t * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n\t *   slash ('/') that may exist.\n\t * @return {String} The `anchorText`, with the trailing slash removed.\n\t */\n\tremoveTrailingSlash : function( anchorText ) {\n\t\tif( anchorText.charAt( anchorText.length - 1 ) === '/' ) {\n\t\t\tanchorText = anchorText.slice( 0, -1 );\n\t\t}\n\t\treturn anchorText;\n\t}\n\t\n} );\nreturn Autolinker;\n\n}));\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/autolinker/dist/Autolinker.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}}],"sources":{"../node_modules/autolinker/dist/Autolinker.js":"(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (root['Autolinker'] = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Autolinker'] = factory();\n  }\n}(this, function () {\n\n/*!\n * Autolinker.js\n * 0.15.3\n *\n * Copyright(c) 2015 Gregory Jacobs <greg@greg-jacobs.com>\n * MIT Licensed. http://www.opensource.org/licenses/mit-license.php\n *\n * https://github.com/gregjacobs/Autolinker.js\n */\n/**\n * @class Autolinker\n * @extends Object\n * \n * Utility class used to process a given string of text, and wrap the URLs, email addresses, and Twitter handles in \n * the appropriate anchor (&lt;a&gt;) tags to turn them into links.\n * \n * Any of the configuration options may be provided in an Object (map) provided to the Autolinker constructor, which\n * will configure how the {@link #link link()} method will process the links.\n * \n * For example:\n * \n *     var autolinker = new Autolinker( {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     \n *     var html = autolinker.link( \"Joe went to www.yahoo.com\" );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n * \n * \n * The {@link #static-link static link()} method may also be used to inline options into a single call, which may\n * be more convenient for one-off uses. For example:\n * \n *     var html = Autolinker.link( \"Joe went to www.yahoo.com\", {\n *         newWindow : false,\n *         truncate  : 30\n *     } );\n *     // produces: 'Joe went to <a href=\"http://www.yahoo.com\">yahoo.com</a>'\n * \n * \n * ## Custom Replacements of Links\n * \n * If the configuration options do not provide enough flexibility, a {@link #replaceFn} may be provided to fully customize\n * the output of Autolinker. This function is called once for each URL/Email/Twitter handle match that is encountered.\n * \n * For example:\n * \n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *     \n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *         \n *             switch( match.getType() ) {\n *                 case 'url' : \n *                     console.log( \"url: \", match.getUrl() );\n *                     \n *                     if( match.getUrl().indexOf( 'mysite.com' ) === -1 ) {\n *                         var tag = autolinker.getTagBuilder().build( match );  // returns an `Autolinker.HtmlTag` instance, which provides mutator methods for easy changes\n *                         tag.setAttr( 'rel', 'nofollow' );\n *                         tag.addClass( 'external-link' );\n *                         \n *                         return tag;\n *                         \n *                     } else {\n *                         return true;  // let Autolinker perform its normal anchor tag replacement\n *                     }\n *                     \n *                 case 'email' :\n *                     var email = match.getEmail();\n *                     console.log( \"email: \", email );\n *                     \n *                     if( email === \"my@own.address\" ) {\n *                         return false;  // don't auto-link this particular email address; leave as-is\n *                     } else {\n *                         return;  // no return value will have Autolinker perform its normal anchor tag replacement (same as returning `true`)\n *                     }\n *                 \n *                 case 'twitter' :\n *                     var twitterHandle = match.getTwitterHandle();\n *                     console.log( twitterHandle );\n *                     \n *                     return '<a href=\"http://newplace.to.link.twitter.handles.to/\">' + twitterHandle + '</a>';\n *             }\n *         }\n *     } );\n * \n * \n * The function may return the following values:\n * \n * - `true` (Boolean): Allow Autolinker to replace the match as it normally would.\n * - `false` (Boolean): Do not replace the current match at all - leave as-is.\n * - Any String: If a string is returned from the function, the string will be used directly as the replacement HTML for\n *   the match.\n * - An {@link Autolinker.HtmlTag} instance, which can be used to build/modify an HTML tag before writing out its HTML text.\n * \n * @constructor\n * @param {Object} [config] The configuration options for the Autolinker instance, specified in an Object (map).\n */\nvar Autolinker = function( cfg ) {\n\tAutolinker.Util.assign( this, cfg );  // assign the properties of `cfg` onto the Autolinker instance. Prototype properties will be used for missing configs.\n};\n\n\nAutolinker.prototype = {\n\tconstructor : Autolinker,  // fix constructor property\n\t\n\t/**\n\t * @cfg {Boolean} urls\n\t * \n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\t\n\t/**\n\t * @cfg {Boolean} email\n\t * \n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\t\n\t/**\n\t * @cfg {Boolean} twitter\n\t * \n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\t\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * \n\t * `true` if the links should open in a new window, `false` otherwise.\n\t */\n\tnewWindow : true,\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t * \n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text, \n\t * `false` otherwise.\n\t */\n\tstripPrefix : true,\n\t\n\t/**\n\t * @cfg {Number} truncate\n\t * \n\t * A number for how many characters long URLs/emails/twitter handles should be truncated to inside the text of \n\t * a link. If the URL/email/twitter is over this number of characters, it will be truncated to this length by \n\t * adding a two period ellipsis ('..') to the end of the string.\n\t * \n\t * For example: A url like 'http://www.yahoo.com/some/long/path/to/a/file' truncated to 25 characters might look\n\t * something like this: 'yahoo.com/some/long/pat..'\n\t */\n\ttruncate : undefined,\n\t\n\t/**\n\t * @cfg {String} className\n\t * \n\t * A CSS class name to add to the generated links. This class will be added to all links, as well as this class\n\t * plus url/email/twitter suffixes for styling url/email/twitter links differently.\n\t * \n\t * For example, if this config is provided as \"myLink\", then:\n\t * \n\t * - URL links will have the CSS classes: \"myLink myLink-url\"\n\t * - Email links will have the CSS classes: \"myLink myLink-email\", and\n\t * - Twitter links will have the CSS classes: \"myLink myLink-twitter\"\n\t */\n\tclassName : \"\",\n\t\n\t/**\n\t * @cfg {Function} replaceFn\n\t * \n\t * A function to individually process each URL/Email/Twitter match found in the input string.\n\t * \n\t * See the class's description for usage.\n\t * \n\t * This function is called with the following parameters:\n\t * \n\t * @cfg {Autolinker} replaceFn.autolinker The Autolinker instance, which may be used to retrieve child objects from (such\n\t *   as the instance's {@link #getTagBuilder tag builder}).\n\t * @cfg {Autolinker.match.Match} replaceFn.match The Match instance which can be used to retrieve information about the\n\t *   {@link Autolinker.match.Url URL}/{@link Autolinker.match.Email email}/{@link Autolinker.match.Twitter Twitter}\n\t *   match that the `replaceFn` is currently processing.\n\t */\n\t\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.htmlParser.HtmlParser} htmlParser\n\t * \n\t * The HtmlParser instance used to skip over HTML tags, while finding text nodes to process. This is lazily instantiated\n\t * in the {@link #getHtmlParser} method.\n\t */\n\thtmlParser : undefined,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.matchParser.MatchParser} matchParser\n\t * \n\t * The MatchParser instance used to find URL/email/Twitter matches in the text nodes of an input string passed to\n\t * {@link #link}. This is lazily instantiated in the {@link #getMatchParser} method.\n\t */\n\tmatchParser : undefined,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.AnchorTagBuilder} tagBuilder\n\t * \n\t * The AnchorTagBuilder instance used to build the URL/email/Twitter replacement anchor tags. This is lazily instantiated\n\t * in the {@link #getTagBuilder} method.\n\t */\n\ttagBuilder : undefined,\n\t\n\t\n\t/**\n\t * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n\t * Does not link URLs found within HTML tags.\n\t * \n\t * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n\t * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n\t * \n\t * This method finds the text around any HTML elements in the input `textOrHtml`, which will be the text that is processed.\n\t * Any original HTML elements will be left as-is, as well as the text that is already wrapped in anchor (&lt;a&gt;) tags.\n\t * \n\t * @param {String} textOrHtml The HTML or text to link URLs, email addresses, and Twitter handles within (depending on if\n\t *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n\t * @return {String} The HTML, with URLs/emails/Twitter handles automatically linked.\n\t */\n\tlink : function( textOrHtml ) {\n\t\tvar htmlParser = this.getHtmlParser(),\n\t\t    htmlNodes = htmlParser.parse( textOrHtml ),\n\t\t    anchorTagStackCount = 0,  // used to only process text around anchor tags, and any inner text/html they may have\n\t\t    resultHtml = [];\n\t\t\n\t\tfor( var i = 0, len = htmlNodes.length; i < len; i++ ) {\n\t\t\tvar node = htmlNodes[ i ],\n\t\t\t    nodeType = node.getType(),\n\t\t\t    nodeText = node.getText();\n\t\t\t\n\t\t\tif( nodeType === 'element' ) {\n\t\t\t\t// Process HTML nodes in the input `textOrHtml`\n\t\t\t\tif( node.getTagName() === 'a' ) {\n\t\t\t\t\tif( !node.isClosing() ) {  // it's the start <a> tag\n\t\t\t\t\t\tanchorTagStackCount++;\n\t\t\t\t\t} else {   // it's the end </a> tag\n\t\t\t\t\t\tanchorTagStackCount = Math.max( anchorTagStackCount - 1, 0 );  // attempt to handle extraneous </a> tags by making sure the stack count never goes below 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresultHtml.push( nodeText );  // now add the text of the tag itself verbatim\n\t\t\t\t\n\t\t\t} else if( nodeType === 'entity' ) {\n\t\t\t\tresultHtml.push( nodeText );  // append HTML entity nodes (such as '&nbsp;') verbatim\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Process text nodes in the input `textOrHtml`\n\t\t\t\tif( anchorTagStackCount === 0 ) {\n\t\t\t\t\t// If we're not within an <a> tag, process the text node to linkify\n\t\t\t\t\tvar linkifiedStr = this.linkifyStr( nodeText );\n\t\t\t\t\tresultHtml.push( linkifiedStr );\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t// `text` is within an <a> tag, simply append the text - we do not want to autolink anything \n\t\t\t\t\t// already within an <a>...</a> tag\n\t\t\t\t\tresultHtml.push( nodeText );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn resultHtml.join( \"\" );\n\t},\n\t\n\t\n\t/**\n\t * Process the text that lies in between HTML tags, performing the anchor tag replacements for matched \n\t * URLs/emails/Twitter handles, and returns the string with the replacements made. \n\t * \n\t * This method does the actual wrapping of URLs/emails/Twitter handles with anchor tags.\n\t * \n\t * @private\n\t * @param {String} str The string of text to auto-link.\n\t * @return {String} The text with anchor tags auto-filled.\n\t */\n\tlinkifyStr : function( str ) {\n\t\treturn this.getMatchParser().replace( str, this.createMatchReturnVal, this );\n\t},\n\t\n\t\n\t/**\n\t * Creates the return string value for a given match in the input string, for the {@link #processTextNode} method.\n\t * \n\t * This method handles the {@link #replaceFn}, if one was provided.\n\t * \n\t * @private\n\t * @param {Autolinker.match.Match} match The Match object that represents the match.\n\t * @return {String} The string that the `match` should be replaced with. This is usually the anchor tag string, but\n\t *   may be the `matchStr` itself if the match is not to be replaced.\n\t */\n\tcreateMatchReturnVal : function( match ) {\n\t\t// Handle a custom `replaceFn` being provided\n\t\tvar replaceFnResult;\n\t\tif( this.replaceFn ) {\n\t\t\treplaceFnResult = this.replaceFn.call( this, this, match );  // Autolinker instance is the context, and the first arg\n\t\t}\n\t\t\n\t\tif( typeof replaceFnResult === 'string' ) {\n\t\t\treturn replaceFnResult;  // `replaceFn` returned a string, use that\n\t\t\t\n\t\t} else if( replaceFnResult === false ) {\n\t\t\treturn match.getMatchedText();  // no replacement for the match\n\t\t\t\n\t\t} else if( replaceFnResult instanceof Autolinker.HtmlTag ) {\n\t\t\treturn replaceFnResult.toString();\n\t\t\n\t\t} else {  // replaceFnResult === true, or no/unknown return value from function\n\t\t\t// Perform Autolinker's default anchor tag generation\n\t\t\tvar tagBuilder = this.getTagBuilder(),\n\t\t\t    anchorTag = tagBuilder.build( match );  // returns an Autolinker.HtmlTag instance\n\t\t\t\n\t\t\treturn anchorTag.toString();\n\t\t}\n\t},\n\t\n\t\n\t/**\n\t * Lazily instantiates and returns the {@link #htmlParser} instance for this Autolinker instance.\n\t * \n\t * @protected\n\t * @return {Autolinker.htmlParser.HtmlParser}\n\t */\n\tgetHtmlParser : function() {\n\t\tvar htmlParser = this.htmlParser;\n\t\t\n\t\tif( !htmlParser ) {\n\t\t\thtmlParser = this.htmlParser = new Autolinker.htmlParser.HtmlParser();\n\t\t}\n\t\t\n\t\treturn htmlParser;\n\t},\n\t\n\t\n\t/**\n\t * Lazily instantiates and returns the {@link #matchParser} instance for this Autolinker instance.\n\t * \n\t * @protected\n\t * @return {Autolinker.matchParser.MatchParser}\n\t */\n\tgetMatchParser : function() {\n\t\tvar matchParser = this.matchParser;\n\t\t\n\t\tif( !matchParser ) {\n\t\t\tmatchParser = this.matchParser = new Autolinker.matchParser.MatchParser( {\n\t\t\t\turls : this.urls,\n\t\t\t\temail : this.email,\n\t\t\t\ttwitter : this.twitter,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn matchParser;\n\t},\n\t\n\t\n\t/**\n\t * Returns the {@link #tagBuilder} instance for this Autolinker instance, lazily instantiating it\n\t * if it does not yet exist.\n\t * \n\t * This method may be used in a {@link #replaceFn} to generate the {@link Autolinker.HtmlTag HtmlTag} instance that \n\t * Autolinker would normally generate, and then allow for modifications before returning it. For example:\n\t * \n\t *     var html = Autolinker.link( \"Test google.com\", {\n\t *         replaceFn : function( autolinker, match ) {\n\t *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n\t *             tag.setAttr( 'rel', 'nofollow' );\n\t *             \n\t *             return tag;\n\t *         }\n\t *     } );\n\t *     \n\t *     // generated html:\n\t *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n\t * \n\t * @return {Autolinker.AnchorTagBuilder}\n\t */\n\tgetTagBuilder : function() {\n\t\tvar tagBuilder = this.tagBuilder;\n\t\t\n\t\tif( !tagBuilder ) {\n\t\t\ttagBuilder = this.tagBuilder = new Autolinker.AnchorTagBuilder( {\n\t\t\t\tnewWindow   : this.newWindow,\n\t\t\t\ttruncate    : this.truncate,\n\t\t\t\tclassName   : this.className\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn tagBuilder;\n\t}\n\n};\n\n\n/**\n * Automatically links URLs, email addresses, and Twitter handles found in the given chunk of HTML. \n * Does not link URLs found within HTML tags.\n * \n * For instance, if given the text: `You should go to http://www.yahoo.com`, then the result\n * will be `You should go to &lt;a href=\"http://www.yahoo.com\"&gt;http://www.yahoo.com&lt;/a&gt;`\n * \n * Example:\n * \n *     var linkedText = Autolinker.link( \"Go to google.com\", { newWindow: false } );\n *     // Produces: \"Go to <a href=\"http://google.com\">google.com</a>\"\n * \n * @static\n * @param {String} textOrHtml The HTML or text to find URLs, email addresses, and Twitter handles within (depending on if\n *   the {@link #urls}, {@link #email}, and {@link #twitter} options are enabled).\n * @param {Object} [options] Any of the configuration options for the Autolinker class, specified in an Object (map).\n *   See the class description for an example call.\n * @return {String} The HTML text, with URLs automatically linked\n */\nAutolinker.link = function( textOrHtml, options ) {\n\tvar autolinker = new Autolinker( options );\n\treturn autolinker.link( textOrHtml );\n};\n\n\n// Autolinker Namespaces\nAutolinker.match = {};\nAutolinker.htmlParser = {};\nAutolinker.matchParser = {};\n/*global Autolinker */\n/*jshint eqnull:true, boss:true */\n/**\n * @class Autolinker.Util\n * @singleton\n * \n * A few utility methods for Autolinker.\n */\nAutolinker.Util = {\n\t\n\t/**\n\t * @property {Function} abstractMethod\n\t * \n\t * A function object which represents an abstract method.\n\t */\n\tabstractMethod : function() { throw \"abstract\"; },\n\t\n\t\n\t/**\n\t * Assigns (shallow copies) the properties of `src` onto `dest`.\n\t * \n\t * @param {Object} dest The destination object.\n\t * @param {Object} src The source object.\n\t * @return {Object} The destination object (`dest`)\n\t */\n\tassign : function( dest, src ) {\n\t\tfor( var prop in src ) {\n\t\t\tif( src.hasOwnProperty( prop ) ) {\n\t\t\t\tdest[ prop ] = src[ prop ];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dest;\n\t},\n\t\n\t\n\t/**\n\t * Extends `superclass` to create a new subclass, adding the `protoProps` to the new subclass's prototype.\n\t * \n\t * @param {Function} superclass The constructor function for the superclass.\n\t * @param {Object} protoProps The methods/properties to add to the subclass's prototype. This may contain the\n\t *   special property `constructor`, which will be used as the new subclass's constructor function.\n\t * @return {Function} The new subclass function.\n\t */\n\textend : function( superclass, protoProps ) {\n\t\tvar superclassProto = superclass.prototype;\n\t\t\n\t\tvar F = function() {};\n\t\tF.prototype = superclassProto;\n\t\t\n\t\tvar subclass;\n\t\tif( protoProps.hasOwnProperty( 'constructor' ) ) {\n\t\t\tsubclass = protoProps.constructor;\n\t\t} else {\n\t\t\tsubclass = function() { superclassProto.constructor.apply( this, arguments ); };\n\t\t}\n\t\t\n\t\tvar subclassProto = subclass.prototype = new F();  // set up prototype chain\n\t\tsubclassProto.constructor = subclass;  // fix constructor property\n\t\tsubclassProto.superclass = superclassProto;\n\t\t\n\t\tdelete protoProps.constructor;  // don't re-assign constructor property to the prototype, since a new function may have been created (`subclass`), which is now already there\n\t\tAutolinker.Util.assign( subclassProto, protoProps );\n\t\t\n\t\treturn subclass;\n\t},\n\t\n\t\n\t/**\n\t * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n\t * end of the string (by default, two periods: '..'). If the `str` length does not exceed \n\t * `len`, the string will be returned unchanged.\n\t * \n\t * @param {String} str The string to truncate and add an ellipsis to.\n\t * @param {Number} truncateLen The length to truncate the string at.\n\t * @param {String} [ellipsisChars=..] The ellipsis character(s) to add to the end of `str`\n\t *   when truncated. Defaults to '..'\n\t */\n\tellipsis : function( str, truncateLen, ellipsisChars ) {\n\t\tif( str.length > truncateLen ) {\n\t\t\tellipsisChars = ( ellipsisChars == null ) ? '..' : ellipsisChars;\n\t\t\tstr = str.substring( 0, truncateLen - ellipsisChars.length ) + ellipsisChars;\n\t\t}\n\t\treturn str;\n\t},\n\t\n\t\n\t/**\n\t * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n\t * \n\t * @param {Array} arr The array to find an element of.\n\t * @param {*} element The element to find in the array, and return the index of.\n\t * @return {Number} The index of the `element`, or -1 if it was not found.\n\t */\n\tindexOf : function( arr, element ) {\n\t\tif( Array.prototype.indexOf ) {\n\t\t\treturn arr.indexOf( element );\n\t\t\t\n\t\t} else {\n\t\t\tfor( var i = 0, len = arr.length; i < len; i++ ) {\n\t\t\t\tif( arr[ i ] === element ) return i;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t},\n\t\n\t\n\t\n\t/**\n\t * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n\t * with a regular expression that contains capturing parenthesis.\n\t * \n\t * For example:\n\t * \n\t *     // Modern browsers: \n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n\t *     \n\t *     // Old IE (including IE8):\n\t *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n\t *     \n\t * This method emulates the functionality of modern browsers for the old IE case.\n\t * \n\t * @param {String} str The string to split.\n\t * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n\t *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the \n\t *   description of this method. \n\t *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n\t *   Note #2: for simplicity's sake, the regular expression does not need \n\t *   to contain capturing parenthesis - it will be assumed that any match has them.\n\t * @return {String[]} The split array of strings, with the splitting character(s) included.\n\t */\n\tsplitAndCapture : function( str, splitRegex ) {\n\t\tif( !splitRegex.global ) throw new Error( \"`splitRegex` must have the 'g' flag set\" );\n\t\t\n\t\tvar result = [],\n\t\t    lastIdx = 0,\n\t\t    match;\n\t\t\n\t\twhile( match = splitRegex.exec( str ) ) {\n\t\t\tresult.push( str.substring( lastIdx, match.index ) );\n\t\t\tresult.push( match[ 0 ] );  // push the splitting char(s)\n\t\t\t\n\t\t\tlastIdx = match.index + match[ 0 ].length;\n\t\t}\n\t\tresult.push( str.substring( lastIdx ) );\n\t\t\n\t\treturn result;\n\t}\n\t\n};\n/*global Autolinker */\n/*jshint boss:true */\n/**\n * @class Autolinker.HtmlTag\n * @extends Object\n * \n * Represents an HTML tag, which can be used to easily build/modify HTML tags programmatically.\n * \n * Autolinker uses this abstraction to create HTML tags, and then write them out as strings. You may also use\n * this class in your code, especially within a {@link Autolinker#replaceFn replaceFn}.\n * \n * ## Examples\n * \n * Example instantiation:\n * \n *     var tag = new Autolinker.HtmlTag( {\n *         tagName : 'a',\n *         attrs   : { 'href': 'http://google.com', 'class': 'external-link' },\n *         innerHtml : 'Google'\n *     } );\n *     \n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *     \n *     // Individual accessor methods\n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n * \n * \n * Using mutator methods (which may be used in combination with instantiation config properties):\n * \n *     var tag = new Autolinker.HtmlTag();\n *     tag.setTagName( 'a' );\n *     tag.setAttr( 'href', 'http://google.com' );\n *     tag.addClass( 'external-link' );\n *     tag.setInnerHtml( 'Google' );\n *     \n *     tag.getTagName();                 // 'a'\n *     tag.getAttr( 'href' );            // 'http://google.com'\n *     tag.hasClass( 'external-link' );  // true\n *     \n *     tag.toString();  // <a href=\"http://google.com\" class=\"external-link\">Google</a>\n *     \n * \n * ## Example use within a {@link Autolinker#replaceFn replaceFn}\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance, configured with the Match's href and anchor text\n *             tag.setAttr( 'rel', 'nofollow' );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n *     \n *     \n * ## Example use with a new tag for the replacement\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = new Autolinker.HtmlTag( {\n *                 tagName : 'button',\n *                 attrs   : { 'title': 'Load URL: ' + match.getAnchorHref() },\n *                 innerHtml : 'Load URL: ' + match.getAnchorText()\n *             } );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <button title=\"Load URL: http://google.com\">Load URL: google.com</button>\n */\nAutolinker.HtmlTag = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} tagName\n\t * \n\t * The tag name. Ex: 'a', 'button', etc.\n\t * \n\t * Not required at instantiation time, but should be set using {@link #setTagName} before {@link #toString}\n\t * is executed.\n\t */\n\t\n\t/**\n\t * @cfg {Object.<String, String>} attrs\n\t * \n\t * An key/value Object (map) of attributes to create the tag with. The keys are the attribute names, and the\n\t * values are the attribute values.\n\t */\n\t\n\t/**\n\t * @cfg {String} innerHtml\n\t * \n\t * The inner HTML for the tag. \n\t * \n\t * Note the camel case name on `innerHtml`. Acronyms are camelCased in this utility (such as not to run into the acronym \n\t * naming inconsistency that the DOM developers created with `XMLHttpRequest`). You may alternatively use {@link #innerHTML}\n\t * if you prefer, but this one is recommended.\n\t */\n\t\n\t/**\n\t * @cfg {String} innerHTML\n\t * \n\t * Alias of {@link #innerHtml}, accepted for consistency with the browser DOM api, but prefer the camelCased version\n\t * for acronym names.\n\t */\n\t\n\t\n\t/**\n\t * @protected\n\t * @property {RegExp} whitespaceRegex\n\t * \n\t * Regular expression used to match whitespace in a string of CSS classes.\n\t */\n\twhitespaceRegex : /\\s+/,\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration properties for this class, in an Object (map)\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t\t\n\t\tthis.innerHtml = this.innerHtml || this.innerHTML;  // accept either the camelCased form or the fully capitalized acronym\n\t},\n\t\n\t\n\t/**\n\t * Sets the tag name that will be used to generate the tag with.\n\t * \n\t * @param {String} tagName\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetTagName : function( tagName ) {\n\t\tthis.tagName = tagName;\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the tag name.\n\t * \n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Sets an attribute on the HtmlTag.\n\t * \n\t * @param {String} attrName The attribute name to set.\n\t * @param {String} attrValue The attribute value to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttr : function( attrName, attrValue ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\ttagAttrs[ attrName ] = attrValue;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves an attribute from the HtmlTag. If the attribute does not exist, returns `undefined`.\n\t * \n\t * @param {String} name The attribute name to retrieve.\n\t * @return {String} The attribute's value, or `undefined` if it does not exist on the HtmlTag.\n\t */\n\tgetAttr : function( attrName ) {\n\t\treturn this.getAttrs()[ attrName ];\n\t},\n\t\n\t\n\t/**\n\t * Sets one or more attributes on the HtmlTag.\n\t * \n\t * @param {Object.<String, String>} attrs A key/value Object (map) of the attributes to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetAttrs : function( attrs ) {\n\t\tvar tagAttrs = this.getAttrs();\n\t\tAutolinker.Util.assign( tagAttrs, attrs );\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the attributes Object (map) for the HtmlTag.\n\t * \n\t * @return {Object.<String, String>} A key/value object of the attributes for the HtmlTag.\n\t */\n\tgetAttrs : function() {\n\t\treturn this.attrs || ( this.attrs = {} );\n\t},\n\t\n\t\n\t/**\n\t * Sets the provided `cssClass`, overwriting any current CSS classes on the HtmlTag.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to set (overwrite).\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetClass : function( cssClass ) {\n\t\treturn this.setAttr( 'class', cssClass );\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to add one or more CSS classes to the HtmlTag. Will not add duplicate CSS classes.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to add.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\taddClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    newClasses = cssClass.split( whitespaceRegex ),\n\t\t    newClass;\n\t\t\n\t\twhile( newClass = newClasses.shift() ) {\n\t\t\tif( indexOf( classes, newClass ) === -1 ) {\n\t\t\t\tclasses.push( newClass );\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to remove one or more CSS classes from the HtmlTag.\n\t * \n\t * @param {String} cssClass One or more space-separated CSS classes to remove.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tremoveClass : function( cssClass ) {\n\t\tvar classAttr = this.getClass(),\n\t\t    whitespaceRegex = this.whitespaceRegex,\n\t\t    indexOf = Autolinker.Util.indexOf,  // to support IE8 and below\n\t\t    classes = ( !classAttr ) ? [] : classAttr.split( whitespaceRegex ),\n\t\t    removeClasses = cssClass.split( whitespaceRegex ),\n\t\t    removeClass;\n\t\t\n\t\twhile( classes.length && ( removeClass = removeClasses.shift() ) ) {\n\t\t\tvar idx = indexOf( classes, removeClass );\n\t\t\tif( idx !== -1 ) {\n\t\t\t\tclasses.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.getAttrs()[ 'class' ] = classes.join( \" \" );\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to retrieve the CSS class(es) for the HtmlTag, which will each be separated by spaces when\n\t * there are multiple.\n\t * \n\t * @return {String}\n\t */\n\tgetClass : function() {\n\t\treturn this.getAttrs()[ 'class' ] || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Convenience method to check if the tag has a CSS class or not.\n\t * \n\t * @param {String} cssClass The CSS class to check for.\n\t * @return {Boolean} `true` if the HtmlTag has the CSS class, `false` otherwise.\n\t */\n\thasClass : function( cssClass ) {\n\t\treturn ( ' ' + this.getClass() + ' ' ).indexOf( ' ' + cssClass + ' ' ) !== -1;\n\t},\n\t\n\t\n\t/**\n\t * Sets the inner HTML for the tag.\n\t * \n\t * @param {String} html The inner HTML to set.\n\t * @return {Autolinker.HtmlTag} This HtmlTag instance, so that method calls may be chained.\n\t */\n\tsetInnerHtml : function( html ) {\n\t\tthis.innerHtml = html;\n\t\t\n\t\treturn this;\n\t},\n\t\n\t\n\t/**\n\t * Retrieves the inner HTML for the tag.\n\t * \n\t * @return {String}\n\t */\n\tgetInnerHtml : function() {\n\t\treturn this.innerHtml || \"\";\n\t},\n\t\n\t\n\t/**\n\t * Override of superclass method used to generate the HTML string for the tag.\n\t * \n\t * @return {String}\n\t */\n\ttoString : function() {\n\t\tvar tagName = this.getTagName(),\n\t\t    attrsStr = this.buildAttrsStr();\n\t\t\n\t\tattrsStr = ( attrsStr ) ? ' ' + attrsStr : '';  // prepend a space if there are actually attributes\n\t\t\n\t\treturn [ '<', tagName, attrsStr, '>', this.getInnerHtml(), '</', tagName, '>' ].join( \"\" );\n\t},\n\t\n\t\n\t/**\n\t * Support method for {@link #toString}, returns the string space-separated key=\"value\" pairs, used to populate \n\t * the stringified HtmlTag.\n\t * \n\t * @protected\n\t * @return {String} Example return: `attr1=\"value1\" attr2=\"value2\"`\n\t */\n\tbuildAttrsStr : function() {\n\t\tif( !this.attrs ) return \"\";  // no `attrs` Object (map) has been set, return empty string\n\t\t\n\t\tvar attrs = this.getAttrs(),\n\t\t    attrsArr = [];\n\t\t\n\t\tfor( var prop in attrs ) {\n\t\t\tif( attrs.hasOwnProperty( prop ) ) {\n\t\t\t\tattrsArr.push( prop + '=\"' + attrs[ prop ] + '\"' );\n\t\t\t}\n\t\t}\n\t\treturn attrsArr.join( \" \" );\n\t}\n\t\n} );\n/*global Autolinker */\n/*jshint sub:true */\n/**\n * @protected\n * @class Autolinker.AnchorTagBuilder\n * @extends Object\n * \n * Builds anchor (&lt;a&gt;) tags for the Autolinker utility when a match is found.\n * \n * Normally this class is instantiated, configured, and used internally by an {@link Autolinker} instance, but may \n * actually be retrieved in a {@link Autolinker#replaceFn replaceFn} to create {@link Autolinker.HtmlTag HtmlTag} instances\n * which may be modified before returning from the {@link Autolinker#replaceFn replaceFn}. For example:\n * \n *     var html = Autolinker.link( \"Test google.com\", {\n *         replaceFn : function( autolinker, match ) {\n *             var tag = autolinker.getTagBuilder().build( match );  // returns an {@link Autolinker.HtmlTag} instance\n *             tag.setAttr( 'rel', 'nofollow' );\n *             \n *             return tag;\n *         }\n *     } );\n *     \n *     // generated html:\n *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n */\nAutolinker.AnchorTagBuilder = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {Boolean} newWindow\n\t * @inheritdoc Autolinker#newWindow\n\t */\n\t\n\t/**\n\t * @cfg {Number} truncate\n\t * @inheritdoc Autolinker#truncate\n\t */\n\t\n\t/**\n\t * @cfg {String} className\n\t * @inheritdoc Autolinker#className\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\t\n\t\n\t/**\n\t * Generates the actual anchor (&lt;a&gt;) tag to use in place of the matched URL/email/Twitter text,\n\t * via its `match` object.\n\t * \n\t * @param {Autolinker.match.Match} match The Match instance to generate an anchor tag from.\n\t * @return {Autolinker.HtmlTag} The HtmlTag instance for the anchor tag.\n\t */\n\tbuild : function( match ) {\n\t\tvar tag = new Autolinker.HtmlTag( {\n\t\t\ttagName   : 'a',\n\t\t\tattrs     : this.createAttrs( match.getType(), match.getAnchorHref() ),\n\t\t\tinnerHtml : this.processAnchorText( match.getAnchorText() )\n\t\t} );\n\t\t\n\t\treturn tag;\n\t},\n\t\n\t\n\t/**\n\t * Creates the Object (map) of the HTML attributes for the anchor (&lt;a&gt;) tag being generated.\n\t * \n\t * @protected\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @param {String} href The href for the anchor tag.\n\t * @return {Object} A key/value Object (map) of the anchor tag's attributes. \n\t */\n\tcreateAttrs : function( matchType, anchorHref ) {\n\t\tvar attrs = {\n\t\t\t'href' : anchorHref  // we'll always have the `href` attribute\n\t\t};\n\t\t\n\t\tvar cssClass = this.createCssClass( matchType );\n\t\tif( cssClass ) {\n\t\t\tattrs[ 'class' ] = cssClass;\n\t\t}\n\t\tif( this.newWindow ) {\n\t\t\tattrs[ 'target' ] = \"_blank\";\n\t\t}\n\t\t\n\t\treturn attrs;\n\t},\n\t\n\t\n\t/**\n\t * Creates the CSS class that will be used for a given anchor tag, based on the `matchType` and the {@link #className}\n\t * config.\n\t * \n\t * @private\n\t * @param {\"url\"/\"email\"/\"twitter\"} matchType The type of match that an anchor tag is being generated for.\n\t * @return {String} The CSS class string for the link. Example return: \"myLink myLink-url\". If no {@link #className}\n\t *   was configured, returns an empty string.\n\t */\n\tcreateCssClass : function( matchType ) {\n\t\tvar className = this.className;\n\t\t\n\t\tif( !className ) \n\t\t\treturn \"\";\n\t\telse\n\t\t\treturn className + \" \" + className + \"-\" + matchType;  // ex: \"myLink myLink-url\", \"myLink myLink-email\", or \"myLink myLink-twitter\"\n\t},\n\t\n\t\n\t/**\n\t * Processes the `anchorText` by truncating the text according to the {@link #truncate} config.\n\t * \n\t * @private\n\t * @param {String} anchorText The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The processed `anchorText`.\n\t */\n\tprocessAnchorText : function( anchorText ) {\n\t\tanchorText = this.doTruncate( anchorText );\n\t\t\n\t\treturn anchorText;\n\t},\n\t\n\t\n\t/**\n\t * Performs the truncation of the `anchorText`, if the `anchorText` is longer than the {@link #truncate} option.\n\t * Truncates the text to 2 characters fewer than the {@link #truncate} option, and adds \"..\" to the end.\n\t * \n\t * @private\n\t * @param {String} text The anchor tag's text (i.e. what will be displayed).\n\t * @return {String} The truncated anchor text.\n\t */\n\tdoTruncate : function( anchorText ) {\n\t\treturn Autolinker.Util.ellipsis( anchorText, this.truncate || Number.POSITIVE_INFINITY );\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.htmlParser.HtmlParser\n * @extends Object\n * \n * An HTML parser implementation which simply walks an HTML string and returns an array of \n * {@link Autolinker.htmlParser.HtmlNode HtmlNodes} that represent the basic HTML structure of the input string.\n * \n * Autolinker uses this to only link URLs/emails/Twitter handles within text nodes, effectively ignoring / \"walking\n * around\" HTML tags.\n */\nAutolinker.htmlParser.HtmlParser = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} htmlRegex\n\t * \n\t * The regular expression used to pull out HTML tags from a string. Handles namespaced HTML tags and\n\t * attribute names, as specified by http://www.w3.org/TR/html-markup/syntax.html.\n\t * \n\t * Capturing groups:\n\t * \n\t * 1. The \"!DOCTYPE\" tag name, if a tag is a &lt;!DOCTYPE&gt; tag.\n\t * 2. If it is an end tag, this group will have the '/'.\n\t * 3. The tag name for all tags (other than the &lt;!DOCTYPE&gt; tag)\n\t */\n\thtmlRegex : (function() {\n\t\tvar tagNameRegex = /[0-9a-zA-Z][0-9a-zA-Z:]*/,\n\t\t    attrNameRegex = /[^\\s\\0\"'>\\/=\\x01-\\x1F\\x7F]+/,   // the unicode range accounts for excluding control chars, and the delete char\n\t\t    attrValueRegex = /(?:\"[^\"]*?\"|'[^']*?'|[^'\"=<>`\\s]+)/, // double quoted, single quoted, or unquoted attribute values\n\t\t    nameEqualsValueRegex = attrNameRegex.source + '(?:\\\\s*=\\\\s*' + attrValueRegex.source + ')?';  // optional '=[value]'\n\t\t\n\t\treturn new RegExp( [\n\t\t\t// for <!DOCTYPE> tag. Ex: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n\t\t\t'(?:',\n\t\t\t\t'<(!DOCTYPE)',  // *** Capturing Group 1 - If it's a doctype tag\n\t\t\t\t\t\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',  // one or more whitespace chars before an attribute\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Either:\n\t\t\t\t\t\t// A. attr=\"value\", or \n\t\t\t\t\t\t// B. \"value\" alone (To cover example doctype tag: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">) \n\t\t\t\t\t\t'(?:', nameEqualsValueRegex, '|', attrValueRegex.source + ')',\n\t\t\t\t\t')*',\n\t\t\t\t'>',\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t// All other HTML tags (i.e. tags that are not <!DOCTYPE>)\n\t\t\t'(?:',\n\t\t\t\t'<(/)?',  // Beginning of a tag. Either '<' for a start tag, or '</' for an end tag. \n\t\t\t\t          // *** Capturing Group 2: The slash or an empty string. Slash ('/') for end tag, empty string for start or self-closing tag.\n\t\t\t\n\t\t\t\t\t// *** Capturing Group 3 - The tag name\n\t\t\t\t\t'(' + tagNameRegex.source + ')',\n\t\t\t\t\t\n\t\t\t\t\t// Zero or more attributes following the tag name\n\t\t\t\t\t'(?:',\n\t\t\t\t\t\t'\\\\s+',                // one or more whitespace chars before an attribute\n\t\t\t\t\t\tnameEqualsValueRegex,  // attr=\"value\" (with optional =\"value\" part)\n\t\t\t\t\t')*',\n\t\t\t\t\t\n\t\t\t\t\t'\\\\s*/?',  // any trailing spaces and optional '/' before the closing '>'\n\t\t\t\t'>',\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} htmlCharacterEntitiesRegex\n\t *\n\t * The regular expression that matches common HTML character entities.\n\t * \n\t * Ignoring &amp; as it could be part of a query string -- handling it separately.\n\t */\n\thtmlCharacterEntitiesRegex: /(&nbsp;|&#160;|&lt;|&#60;|&gt;|&#62;|&quot;|&#34;|&#39;)/gi,\n\t\n\t\n\t/**\n\t * Parses an HTML string and returns a simple array of {@link Autolinker.htmlParser.HtmlNode HtmlNodes} to represent\n\t * the HTML structure of the input string. \n\t * \n\t * @param {String} html The HTML to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]}\n\t */\n\tparse : function( html ) {\n\t\tvar htmlRegex = this.htmlRegex,\n\t\t    currentResult,\n\t\t    lastIndex = 0,\n\t\t    textAndEntityNodes,\n\t\t    nodes = [];  // will be the result of the method\n\t\t\n\t\twhile( ( currentResult = htmlRegex.exec( html ) ) !== null ) {\n\t\t\tvar tagText = currentResult[ 0 ],\n\t\t\t    tagName = currentResult[ 1 ] || currentResult[ 3 ],  // The <!DOCTYPE> tag (ex: \"!DOCTYPE\"), or another tag (ex: \"a\" or \"img\") \n\t\t\t    isClosingTag = !!currentResult[ 2 ],\n\t\t\t    inBetweenTagsText = html.substring( lastIndex, currentResult.index );\n\t\t\t\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( inBetweenTagsText ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( inBetweenTagsText );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\t\t\t\n\t\t\t// Push the ElementNode\n\t\t\tnodes.push( this.createElementNode( tagText, tagName, isClosingTag ) );\n\t\t\t\n\t\t\tlastIndex = currentResult.index + tagText.length;\n\t\t}\n\t\t\n\t\t// Process any remaining text after the last HTML element. Will process all of the text if there were no HTML elements.\n\t\tif( lastIndex < html.length ) {\n\t\t\tvar text = html.substring( lastIndex );\n\t\t\t\n\t\t\t// Push TextNodes and EntityNodes for any text found between tags\n\t\t\tif( text ) {\n\t\t\t\ttextAndEntityNodes = this.parseTextAndEntityNodes( text );\n\t\t\t\tnodes.push.apply( nodes, textAndEntityNodes );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn nodes;\n\t},\n\t\n\t\n\t/**\n\t * Parses text and HTML entity nodes from a given string. The input string should not have any HTML tags (elements)\n\t * within it.\n\t * \n\t * @private\n\t * @param {String} text The text to parse.\n\t * @return {Autolinker.htmlParser.HtmlNode[]} An array of HtmlNodes to represent the \n\t *   {@link Autolinker.htmlParser.TextNode TextNodes} and {@link Autolinker.htmlParser.EntityNode EntityNodes} found.\n\t */\n\tparseTextAndEntityNodes : function( text ) {\n\t\tvar nodes = [],\n\t\t    textAndEntityTokens = Autolinker.Util.splitAndCapture( text, this.htmlCharacterEntitiesRegex );  // split at HTML entities, but include the HTML entities in the results array\n\t\t\n\t\t// Every even numbered token is a TextNode, and every odd numbered token is an EntityNode\n\t\t// For example: an input `text` of \"Test &quot;this&quot; today\" would turn into the \n\t\t//   `textAndEntityTokens`: [ 'Test ', '&quot;', 'this', '&quot;', ' today' ]\n\t\tfor( var i = 0, len = textAndEntityTokens.length; i < len; i += 2 ) {\n\t\t\tvar textToken = textAndEntityTokens[ i ],\n\t\t\t    entityToken = textAndEntityTokens[ i + 1 ];\n\t\t\t\n\t\t\tif( textToken ) nodes.push( this.createTextNode( textToken ) );\n\t\t\tif( entityToken ) nodes.push( this.createEntityNode( entityToken ) );\n\t\t}\n\t\treturn nodes;\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create an {@link Autolinker.htmlParser.ElementNode ElementNode}.\n\t * \n\t * @private\n\t * @param {String} tagText The full text of the tag (element) that was matched, including its attributes.\n\t * @param {String} tagName The name of the tag. Ex: An &lt;img&gt; tag would be passed to this method as \"img\".\n\t * @param {Boolean} isClosingTag `true` if it's a closing tag, false otherwise.\n\t * @return {Autolinker.htmlParser.ElementNode}\n\t */\n\tcreateElementNode : function( tagText, tagName, isClosingTag ) {\n\t\treturn new Autolinker.htmlParser.ElementNode( {\n\t\t\ttext    : tagText,\n\t\t\ttagName : tagName.toLowerCase(),\n\t\t\tclosing : isClosingTag\n\t\t} );\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.EntityNode EntityNode}.\n\t * \n\t * @private\n\t * @param {String} text The text that was matched for the HTML entity (such as '&amp;nbsp;').\n\t * @return {Autolinker.htmlParser.EntityNode}\n\t */\n\tcreateEntityNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.EntityNode( { text: text } );\n\t},\n\t\n\t\n\t/**\n\t * Factory method to create a {@link Autolinker.htmlParser.TextNode TextNode}.\n\t * \n\t * @private\n\t * @param {String} text The text that was matched.\n\t * @return {Autolinker.htmlParser.TextNode}\n\t */\n\tcreateTextNode : function( text ) {\n\t\treturn new Autolinker.htmlParser.TextNode( { text: text } );\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.htmlParser.HtmlNode\n * \n * Represents an HTML node found in an input string. An HTML node is one of the following:\n * \n * 1. An {@link Autolinker.htmlParser.ElementNode ElementNode}, which represents HTML tags.\n * 2. A {@link Autolinker.htmlParser.TextNode TextNode}, which represents text outside or within HTML tags.\n * 3. A {@link Autolinker.htmlParser.EntityNode EntityNode}, which represents one of the known HTML\n *    entities that Autolinker looks for. This includes common ones such as &amp;quot; and &amp;nbsp;\n */\nAutolinker.htmlParser.HtmlNode = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} text (required)\n\t * \n\t * The original text that was matched for the HtmlNode. \n\t * \n\t * - In the case of an {@link Autolinker.htmlParser.ElementNode ElementNode}, this will be the tag's\n\t *   text.\n\t * - In the case of a {@link Autolinker.htmlParser.TextNode TextNode}, this will be the text itself.\n\t * - In the case of a {@link Autolinker.htmlParser.EntityNode EntityNode}, this will be the text of\n\t *   the HTML entity.\n\t */\n\ttext : \"\",\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Retrieves the {@link #text} for the HtmlNode.\n\t * \n\t * @return {String}\n\t */\n\tgetText : function() {\n\t\treturn this.text;\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.ElementNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents an HTML element node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.ElementNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * @cfg {String} tagName (required)\n\t * \n\t * The name of the tag that was matched.\n\t */\n\ttagName : '',\n\t\n\t/**\n\t * @cfg {Boolean} closing (required)\n\t * \n\t * `true` if the element (tag) is a closing tag, `false` if its an opening tag.\n\t */\n\tclosing : false,\n\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'element';\n\t},\n\t\n\n\t/**\n\t * Returns the HTML element's (tag's) name. Ex: for an &lt;img&gt; tag, returns \"img\".\n\t * \n\t * @return {String}\n\t */\n\tgetTagName : function() {\n\t\treturn this.tagName;\n\t},\n\t\n\t\n\t/**\n\t * Determines if the HTML element (tag) is a closing tag. Ex: &lt;div&gt; returns\n\t * `false`, while &lt;/div&gt; returns `true`.\n\t * \n\t * @return {Boolean}\n\t */\n\tisClosing : function() {\n\t\treturn this.closing;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.EntityNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents a known HTML entity node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * Ex: '&amp;nbsp;', or '&amp#160;' (which will be retrievable from the {@link #getText} method.\n * \n * Note that this class will only be returned from the HtmlParser for the set of checked HTML entity nodes \n * defined by the {@link Autolinker.htmlParser.HtmlParser#htmlCharacterEntitiesRegex}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.EntityNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'entity';\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.htmlParser.TextNode\n * @extends Autolinker.htmlParser.HtmlNode\n * \n * Represents a text node that has been parsed by the {@link Autolinker.htmlParser.HtmlParser}.\n * \n * See this class's superclass ({@link Autolinker.htmlParser.HtmlNode}) for more details.\n */\nAutolinker.htmlParser.TextNode = Autolinker.Util.extend( Autolinker.htmlParser.HtmlNode, {\n\t\n\t/**\n\t * Returns a string name for the type of node that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'text';\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @private\n * @class Autolinker.matchParser.MatchParser\n * @extends Object\n * \n * Used by Autolinker to parse {@link #urls URLs}, {@link #emails email addresses}, and {@link #twitter Twitter handles}, \n * given an input string of text.\n * \n * The MatchParser is fed a non-HTML string in order to search out URLs, email addresses and Twitter handles. Autolinker\n * first uses the {@link HtmlParser} to \"walk around\" HTML tags, and then the text around the HTML tags is passed into\n * the MatchParser in order to find the actual matches.\n */\nAutolinker.matchParser.MatchParser = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {Boolean} urls\n\t * \n\t * `true` if miscellaneous URLs should be automatically linked, `false` if they should not be.\n\t */\n\turls : true,\n\t\n\t/**\n\t * @cfg {Boolean} email\n\t * \n\t * `true` if email addresses should be automatically linked, `false` if they should not be.\n\t */\n\temail : true,\n\t\n\t/**\n\t * @cfg {Boolean} twitter\n\t * \n\t * `true` if Twitter handles (\"@example\") should be automatically linked, `false` if they should not be.\n\t */\n\ttwitter : true,\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix\n\t * \n\t * `true` if 'http://' or 'https://' and/or the 'www.' should be stripped from the beginning of URL links' text\n\t * in {@link Autolinker.match.Url URL matches}, `false` otherwise.\n\t * \n\t * TODO: Handle this before a URL Match object is instantiated.\n\t */\n\tstripPrefix : true,\n\t\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} matcherRegex\n\t * \n\t * The regular expression that matches URLs, email addresses, and Twitter handles.\n\t * \n\t * This regular expression has the following capturing groups:\n\t * \n\t * 1. Group that is used to determine if there is a Twitter handle match (i.e. \\@someTwitterUser). Simply check for its \n\t *    existence to determine if there is a Twitter handle match. The next couple of capturing groups give information \n\t *    about the Twitter handle match.\n\t * 2. The whitespace character before the \\@sign in a Twitter handle. This is needed because there are no lookbehinds in\n\t *    JS regular expressions, and can be used to reconstruct the original string in a replace().\n\t * 3. The Twitter handle itself in a Twitter match. If the match is '@someTwitterUser', the handle is 'someTwitterUser'.\n\t * 4. Group that matches an email address. Used to determine if the match is an email address, as well as holding the full \n\t *    address. Ex: 'me@my.com'\n\t * 5. Group that matches a URL in the input text. Ex: 'http://google.com', 'www.google.com', or just 'google.com'.\n\t *    This also includes a path, url parameters, or hash anchors. Ex: google.com/path/to/file?q1=1&q2=2#myAnchor\n\t * 6. Group that matches a protocol URL (i.e. 'http://google.com'). This is used to match protocol URLs with just a single\n\t *    word, like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * 7. A protocol-relative ('//') match for the case of a 'www.' prefixed URL. Will be an empty string if it is not a \n\t *    protocol-relative match. We need to know the character before the '//' in order to determine if it is a valid match\n\t *    or the // was in a string we don't want to auto-link.\n\t * 8. A protocol-relative ('//') match for the case of a known TLD prefixed URL. Will be an empty string if it is not a \n\t *    protocol-relative match. See #6 for more info. \n\t */\n\tmatcherRegex : (function() {\n\t\tvar twitterRegex = /(^|[^\\w])@(\\w{1,15})/,              // For matching a twitter handle. Ex: @gregory_jacobs\n\t\t    \n\t\t    emailRegex = /(?:[\\-;:&=\\+\\$,\\w\\.]+@)/,             // something@ for email addresses (a.k.a. local-part)\n\t\t    \n\t\t    protocolRegex = /(?:[A-Za-z][-.+A-Za-z0-9]+:(?![A-Za-z][-.+A-Za-z0-9]+:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\t    wwwRegex = /(?:www\\.)/,                             // starting with 'www.'\n\t\t    domainNameRegex = /[A-Za-z0-9\\.\\-]*[A-Za-z0-9\\-]/,  // anything looking at all like a domain, non-unicode domains, not ending in a period\n\t\t    tldRegex = /\\.(?:international|construction|contractors|enterprises|photography|productions|foundation|immobilien|industries|management|properties|technology|christmas|community|directory|education|equipment|institute|marketing|solutions|vacations|bargains|boutique|builders|catering|cleaning|clothing|computer|democrat|diamonds|graphics|holdings|lighting|partners|plumbing|supplies|training|ventures|academy|careers|company|cruises|domains|exposed|flights|florist|gallery|guitars|holiday|kitchen|neustar|okinawa|recipes|rentals|reviews|shiksha|singles|support|systems|agency|berlin|camera|center|coffee|condos|dating|estate|events|expert|futbol|kaufen|luxury|maison|monash|museum|nagoya|photos|repair|report|social|supply|tattoo|tienda|travel|viajes|villas|vision|voting|voyage|actor|build|cards|cheap|codes|dance|email|glass|house|mango|ninja|parts|photo|shoes|solar|today|tokyo|tools|watch|works|aero|arpa|asia|best|bike|blue|buzz|camp|club|cool|coop|farm|fish|gift|guru|info|jobs|kiwi|kred|land|limo|link|menu|mobi|moda|name|pics|pink|post|qpon|rich|ruhr|sexy|tips|vote|voto|wang|wien|wiki|zone|bar|bid|biz|cab|cat|ceo|com|edu|gov|int|kim|mil|net|onl|org|pro|pub|red|tel|uno|wed|xxx|xyz|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)\\b/,   // match our known top level domains (TLDs)\n\t\t    \n\t\t    // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t    // http://blog.codinghorror.com/the-problem-with-urls/\n\t\t    urlSuffixRegex = /[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]?!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|'$*\\[\\]]/;\n\t\t\n\t\treturn new RegExp( [\n\t\t\t'(',  // *** Capturing group $1, which can be used to check for a twitter handle match. Use group $3 for the actual twitter handle though. $2 may be used to reconstruct the original string in a replace() \n\t\t\t\t// *** Capturing group $2, which matches the whitespace character before the '@' sign (needed because of no lookbehinds), and \n\t\t\t\t// *** Capturing group $3, which matches the actual twitter handle\n\t\t\t\ttwitterRegex.source,\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t'(',  // *** Capturing group $4, which is used to determine an email match\n\t\t\t\temailRegex.source,\n\t\t\t\tdomainNameRegex.source,\n\t\t\t\ttldRegex.source,\n\t\t\t')',\n\t\t\t\n\t\t\t'|',\n\t\t\t\n\t\t\t'(',  // *** Capturing group $5, which is used to match a URL\n\t\t\t\t'(?:', // parens to cover match for protocol (optional), and domain\n\t\t\t\t\t'(',  // *** Capturing group $6, for a protocol-prefixed url (ex: http://google.com)\n\t\t\t\t\t\tprotocolRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t\t\n\t\t\t\t\t'|',\n\t\t\t\t\t\n\t\t\t\t\t'(?:',  // non-capturing paren for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $7 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\twwwRegex.source,\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t\t\n\t\t\t\t\t'|',\n\t\t\t\t\t\n\t\t\t\t\t'(?:',  // non-capturing paren for known a TLD url (ex: google.com)\n\t\t\t\t\t\t'(.?//)?',  // *** Capturing group $8 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character\n\t\t\t\t\t\tdomainNameRegex.source,\n\t\t\t\t\t\ttldRegex.source,\n\t\t\t\t\t')',\n\t\t\t\t')',\n\t\t\t\t\n\t\t\t\t'(?:' + urlSuffixRegex.source + ')?',  // match for path, query string, and/or hash anchor - optional\n\t\t\t')'\n\t\t].join( \"\" ), 'gi' );\n\t} )(),\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} charBeforeProtocolRelMatchRegex\n\t * \n\t * The regular expression used to retrieve the character before a protocol-relative URL match.\n\t * \n\t * This is used in conjunction with the {@link #matcherRegex}, which needs to grab the character before a protocol-relative\n\t * '//' due to the lack of a negative look-behind in JavaScript regular expressions. The character before the match is stripped\n\t * from the URL.\n\t */\n\tcharBeforeProtocolRelMatchRegex : /^(.)?\\/\\//,\n\t\n\t/**\n\t * @private\n\t * @property {Autolinker.MatchValidator} matchValidator\n\t * \n\t * The MatchValidator object, used to filter out any false positives from the {@link #matcherRegex}. See\n\t * {@link Autolinker.MatchValidator} for details.\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} [cfg] The configuration options for the AnchorTagBuilder instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t\n\t\tthis.matchValidator = new Autolinker.MatchValidator();\n\t},\n\t\n\t\n\t/**\n\t * Parses the input `text` to search for URLs/emails/Twitter handles, and calls the `replaceFn`\n\t * to allow replacements of the matches. Returns the `text` with matches replaced.\n\t * \n\t * @param {String} text The text to search and repace matches in.\n\t * @param {Function} replaceFn The iterator function to handle the replacements. The function takes a\n\t *   single argument, a {@link Autolinker.match.Match} object, and should return the text that should\n\t *   make the replacement.\n\t * @param {Object} [contextObj=window] The context object (\"scope\") to run the `replaceFn` in.\n\t * @return {String}\n\t */\n\treplace : function( text, replaceFn, contextObj ) {\n\t\tvar me = this;  // for closure\n\t\t\n\t\treturn text.replace( this.matcherRegex, function( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 ) {\n\t\t\tvar matchDescObj = me.processCandidateMatch( matchStr, $1, $2, $3, $4, $5, $6, $7, $8 );  // \"match description\" object\n\t\t\t\n\t\t\t// Return out with no changes for match types that are disabled (url, email, twitter), or for matches that are \n\t\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\t\tif( !matchDescObj ) {\n\t\t\t\treturn matchStr;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t// Generate replacement text for the match from the `replaceFn`\n\t\t\t\tvar replaceStr = replaceFn.call( contextObj, matchDescObj.match );\n\t\t\t\treturn matchDescObj.prefixStr + replaceStr + matchDescObj.suffixStr;\n\t\t\t}\n\t\t} );\n\t},\n\t\n\t\n\t/**\n\t * Processes a candidate match from the {@link #matcherRegex}. \n\t * \n\t * Not all matches found by the regex are actual URL/email/Twitter matches, as determined by the {@link #matchValidator}. In\n\t * this case, the method returns `null`. Otherwise, a valid Object with `prefixStr`, `match`, and `suffixStr` is returned.\n\t * \n\t * @private\n\t * @param {String} matchStr The full match that was found by the {@link #matcherRegex}.\n\t * @param {String} twitterMatch The matched text of a Twitter handle, if the match is a Twitter match.\n\t * @param {String} twitterHandlePrefixWhitespaceChar The whitespace char before the @ sign in a Twitter handle match. This \n\t *   is needed because of no lookbehinds in JS regexes, and is need to re-include the character for the anchor tag replacement.\n\t * @param {String} twitterHandle The actual Twitter user (i.e the word after the @ sign in a Twitter match).\n\t * @param {String} emailAddressMatch The matched email address for an email address match.\n\t * @param {String} urlMatch The matched URL string for a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} wwwProtocolRelativeMatch The '//' for a protocol-relative match from a 'www' url, with the character that \n\t *   comes before the '//'.\n\t * @param {String} tldProtocolRelativeMatch The '//' for a protocol-relative match from a TLD (top level domain) match, with \n\t *   the character that comes before the '//'.\n\t *   \n\t * @return {Object} A \"match description object\". This will be `null` if the match was invalid, or if a match type is disabled.\n\t *   Otherwise, this will be an Object (map) with the following properties:\n\t * @return {String} return.prefixStr The char(s) that should be prepended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n\t *   the replacement stream.\n\t * @return {String} return.suffixStr The char(s) that should be appended to the replacement string. These are char(s) that\n\t *   were needed to be included from the regex match that were ignored by processing code, and should be re-inserted into \n\t *   the replacement stream.\n\t * @return {Autolinker.match.Match} return.match The Match object that represents the match that was found.\n\t */\n\tprocessCandidateMatch : function( \n\t\tmatchStr, twitterMatch, twitterHandlePrefixWhitespaceChar, twitterHandle, \n\t\temailAddressMatch, urlMatch, protocolUrlMatch, wwwProtocolRelativeMatch, tldProtocolRelativeMatch\n\t) {\n\t\t// Note: The `matchStr` variable wil be fixed up to remove characters that are no longer needed (which will \n\t\t// be added to `prefixStr` and `suffixStr`).\n\t\t\n\t\tvar protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t    match,  // Will be an Autolinker.match.Match object\n\t\t    \n\t\t    prefixStr = \"\",       // A string to use to prefix the anchor tag that is created. This is needed for the Twitter handle match\n\t\t    suffixStr = \"\";       // A string to suffix the anchor tag that is created. This is used if there is a trailing parenthesis that should not be auto-linked.\n\t\t    \n\t\t\n\t\t// Return out with `null` for match types that are disabled (url, email, twitter), or for matches that are \n\t\t// invalid (false positives from the matcherRegex, which can't use look-behinds since they are unavailable in JS).\n\t\tif(\n\t\t\t( twitterMatch && !this.twitter ) || ( emailAddressMatch && !this.email ) || ( urlMatch && !this.urls ) ||\n\t\t\t!this.matchValidator.isValidMatch( urlMatch, protocolUrlMatch, protocolRelativeMatch ) \n\t\t) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// Handle a closing parenthesis at the end of the match, and exclude it if there is not a matching open parenthesis\n\t\t// in the match itself. \n\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\n\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\n\t\t\tsuffixStr = \")\";  // this will be added after the generated <a> tag\n\t\t}\n\t\t\n\t\t\n\t\tif( emailAddressMatch ) {\n\t\t\tmatch = new Autolinker.match.Email( { matchedText: matchStr, email: emailAddressMatch } );\n\t\t\t\n\t\t} else if( twitterMatch ) {\n\t\t\t// fix up the `matchStr` if there was a preceding whitespace char, which was needed to determine the match \n\t\t\t// itself (since there are no look-behinds in JS regexes)\n\t\t\tif( twitterHandlePrefixWhitespaceChar ) {\n\t\t\t\tprefixStr = twitterHandlePrefixWhitespaceChar;\n\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed whitespace char from the match\n\t\t\t}\n\t\t\tmatch = new Autolinker.match.Twitter( { matchedText: matchStr, twitterHandle: twitterHandle } );\n\t\t\t\n\t\t} else {  // url match\n\t\t\t// If it's a protocol-relative '//' match, remove the character before the '//' (which the matcherRegex needed\n\t\t\t// to match due to the lack of a negative look-behind in JavaScript regular expressions)\n\t\t\tif( protocolRelativeMatch ) {\n\t\t\t\tvar charBeforeMatch = protocolRelativeMatch.match( this.charBeforeProtocolRelMatchRegex )[ 1 ] || \"\";\n\t\t\t\t\n\t\t\t\tif( charBeforeMatch ) {  // fix up the `matchStr` if there was a preceding char before a protocol-relative match, which was needed to determine the match itself (since there are no look-behinds in JS regexes)\n\t\t\t\t\tprefixStr = charBeforeMatch;\n\t\t\t\t\tmatchStr = matchStr.slice( 1 );  // remove the prefixed char from the match\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmatch = new Autolinker.match.Url( {\n\t\t\t\tmatchedText : matchStr,\n\t\t\t\turl : matchStr,\n\t\t\t\tprotocolUrlMatch : !!protocolUrlMatch,\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\n\t\t\t\tstripPrefix : this.stripPrefix\n\t\t\t} );\n\t\t}\n\t\t\n\t\treturn {\n\t\t\tprefixStr : prefixStr,\n\t\t\tsuffixStr : suffixStr,\n\t\t\tmatch     : match\n\t\t};\n\t},\n\t\n\t\n\t/**\n\t * Determines if a match found has an unmatched closing parenthesis. If so, this parenthesis will be removed\n\t * from the match itself, and appended after the generated anchor tag in {@link #processTextNode}.\n\t * \n\t * A match may have an extra closing parenthesis at the end of the match because the regular expression must include parenthesis\n\t * for URLs such as \"wikipedia.com/something_(disambiguation)\", which should be auto-linked. \n\t * \n\t * However, an extra parenthesis *will* be included when the URL itself is wrapped in parenthesis, such as in the case of\n\t * \"(wikipedia.com/something_(disambiguation))\". In this case, the last closing parenthesis should *not* be part of the URL \n\t * itself, and this method will return `true`.\n\t * \n\t * @private\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis at the end of the `matchStr`, `false` otherwise.\n\t */\n\tmatchHasUnbalancedClosingParen : function( matchStr ) {\n\t\tvar lastChar = matchStr.charAt( matchStr.length - 1 );\n\t\t\n\t\tif( lastChar === ')' ) {\n\t\t\tvar openParensMatch = matchStr.match( /\\(/g ),\n\t\t\t    closeParensMatch = matchStr.match( /\\)/g ),\n\t\t\t    numOpenParens = ( openParensMatch && openParensMatch.length ) || 0,\n\t\t\t    numCloseParens = ( closeParensMatch && closeParensMatch.length ) || 0;\n\t\t\t\n\t\t\tif( numOpenParens < numCloseParens ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n} );\n/*global Autolinker */\n/*jshint scripturl:true */\n/**\n * @private\n * @class Autolinker.MatchValidator\n * @extends Object\n * \n * Used by Autolinker to filter out false positives from the {@link Autolinker#matcherRegex}.\n * \n * Due to the limitations of regular expressions (including the missing feature of look-behinds in JS regular expressions),\n * we cannot always determine the validity of a given match. This class applies a bit of additional logic to filter out any\n * false positives that have been matched by the {@link Autolinker#matcherRegex}.\n */\nAutolinker.MatchValidator = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} invalidProtocolRelMatchRegex\n\t * \n\t * The regular expression used to check a potential protocol-relative URL match, coming from the \n\t * {@link Autolinker#matcherRegex}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t * \n\t * This regular expression checks to see if there is a word character before the '//' match in order to determine if \n\t * we should actually autolink a protocol-relative URL. This is needed because there is no negative look-behind in \n\t * JavaScript regular expressions. \n\t * \n\t * For instance, we want to autolink something like \"Go to: //google.com\", but we don't want to autolink something \n\t * like \"abc//google.com\"\n\t */\n\tinvalidProtocolRelMatchRegex : /^[\\w]\\/\\//,\n\t\n\t/**\n\t * Regex to test for a full protocol, with the two trailing slashes. Ex: 'http://'\n\t * \n\t * @private\n\t * @property {RegExp} hasFullProtocolRegex\n\t */\n\thasFullProtocolRegex : /^[A-Za-z][-.+A-Za-z0-9]+:\\/\\//,\n\t\n\t/**\n\t * Regex to find the URI scheme, such as 'mailto:'.\n\t * \n\t * This is used to filter out 'javascript:' and 'vbscript:' schemes.\n\t * \n\t * @private\n\t * @property {RegExp} uriSchemeRegex\n\t */\n\turiSchemeRegex : /^[A-Za-z][-.+A-Za-z0-9]+:/,\n\t\n\t/**\n\t * Regex to determine if at least one word char exists after the protocol (i.e. after the ':')\n\t * \n\t * @private\n\t * @property {RegExp} hasWordCharAfterProtocolRegex\n\t */\n\thasWordCharAfterProtocolRegex : /:[^\\s]*?[A-Za-z]/,\n\t\n\t\n\t/**\n\t * Determines if a given match found by {@link Autolinker#processTextNode} is valid. Will return `false` for:\n\t * \n\t * 1) URL matches which do not have at least have one period ('.') in the domain name (effectively skipping over \n\t *    matches like \"abc:def\"). However, URL matches with a protocol will be allowed (ex: 'http://localhost')\n\t * 2) URL matches which do not have at least one word character in the domain name (effectively skipping over\n\t *    matches like \"git:1.0\").\n\t * 3) A protocol-relative url match (a URL beginning with '//') whose previous character is a word character \n\t *    (effectively skipping over strings like \"abc//google.com\")\n\t * \n\t * Otherwise, returns `true`.\n\t * \n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if the match given is valid and should be processed, or `false` if the match is invalid and/or \n\t *   should just not be processed.\n\t */\n\tisValidMatch : function( urlMatch, protocolUrlMatch, protocolRelativeMatch ) {\n\t\tif(\n\t\t\t( protocolUrlMatch && !this.isValidUriScheme( protocolUrlMatch ) ) ||\n\t\t\tthis.urlMatchDoesNotHaveProtocolOrDot( urlMatch, protocolUrlMatch ) ||       // At least one period ('.') must exist in the URL match for us to consider it an actual URL, *unless* it was a full protocol match (like 'http://localhost')\n\t\t\tthis.urlMatchDoesNotHaveAtLeastOneWordChar( urlMatch, protocolUrlMatch ) ||  // At least one letter character must exist in the domain name after a protocol match. Ex: skip over something like \"git:1.0\"\n\t\t\tthis.isInvalidProtocolRelativeMatch( protocolRelativeMatch )                 // A protocol-relative match which has a word character in front of it (so we can skip something like \"abc//google.com\")\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t\n\t/**\n\t * Determines if the URI scheme is a valid scheme to be autolinked. Returns `false` if the scheme is \n\t * 'javascript:' or 'vbscript:'\n\t * \n\t * @private\n\t * @param {String} uriSchemeMatch The match URL string for a full URI scheme match. Ex: 'http://yahoo.com' \n\t *   or 'mailto:a@a.com'.\n\t * @return {Boolean} `true` if the scheme is a valid one, `false` otherwise.\n\t */\n\tisValidUriScheme : function( uriSchemeMatch ) {\n\t\tvar uriScheme = uriSchemeMatch.match( this.uriSchemeRegex )[ 0 ].toLowerCase();\n\t\t\n\t\treturn ( uriScheme !== 'javascript:' && uriScheme !== 'vbscript:' );\n\t},\n\t\n\t\n\t/**\n\t * Determines if a URL match does not have either:\n\t * \n\t * a) a full protocol (i.e. 'http://'), or\n\t * b) at least one dot ('.') in the domain name (for a non-full-protocol match).\n\t * \n\t * Either situation is considered an invalid URL (ex: 'git:d' does not have either the '://' part, or at least one dot\n\t * in the domain name. If the match was 'git:abc.com', we would consider this valid.)\n\t * \n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to match\n\t *   something like 'http://localhost', where we won't double check that the domain name has at least one '.' in it.\n\t * @return {Boolean} `true` if the URL match does not have a full protocol, or at least one dot ('.') in a non-full-protocol\n\t *   match.\n\t */\n\turlMatchDoesNotHaveProtocolOrDot : function( urlMatch, protocolUrlMatch ) {\n\t\treturn ( !!urlMatch && ( !protocolUrlMatch || !this.hasFullProtocolRegex.test( protocolUrlMatch ) ) && urlMatch.indexOf( '.' ) === -1 );\n\t},\n\t\n\t\n\t/**\n\t * Determines if a URL match does not have at least one word character after the protocol (i.e. in the domain name).\n\t * \n\t * At least one letter character must exist in the domain name after a protocol match. Ex: skip over something \n\t * like \"git:1.0\"\n\t * \n\t * @private\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an empty string if the match is not a URL match.\n\t * @param {String} protocolUrlMatch The match URL string for a protocol match. Ex: 'http://yahoo.com'. This is used to\n\t *   know whether or not we have a protocol in the URL string, in order to check for a word character after the protocol\n\t *   separator (':').\n\t * @return {Boolean} `true` if the URL match does not have at least one word character in it after the protocol, `false`\n\t *   otherwise.\n\t */\n\turlMatchDoesNotHaveAtLeastOneWordChar : function( urlMatch, protocolUrlMatch ) {\n\t\tif( urlMatch && protocolUrlMatch ) {\n\t\t\treturn !this.hasWordCharAfterProtocolRegex.test( urlMatch );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t\n\t\n\t/**\n\t * Determines if a protocol-relative match is an invalid one. This method returns `true` if there is a `protocolRelativeMatch`,\n\t * and that match contains a word character before the '//' (i.e. it must contain whitespace or nothing before the '//' in\n\t * order to be considered valid).\n\t * \n\t * @private\n\t * @param {String} protocolRelativeMatch The protocol-relative string for a URL match (i.e. '//'), possibly with a preceding\n\t *   character (ex, a space, such as: ' //', or a letter, such as: 'a//'). The match is invalid if there is a word character\n\t *   preceding the '//'.\n\t * @return {Boolean} `true` if it is an invalid protocol-relative match, `false` otherwise.\n\t */\n\tisInvalidProtocolRelativeMatch : function( protocolRelativeMatch ) {\n\t\treturn ( !!protocolRelativeMatch && this.invalidProtocolRelMatchRegex.test( protocolRelativeMatch ) );\n\t}\n\n} );\n/*global Autolinker */\n/**\n * @abstract\n * @class Autolinker.match.Match\n * \n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a \n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n * \n * For example:\n * \n *     var input = \"...\";  // string with URLs, Email Addresses, and Twitter Handles\n *     \n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( autolinker, match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *         \n *             switch( match.getType() ) {\n *                 case 'url' : \n *                     console.log( \"url: \", match.getUrl() );\n *                     \n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *                     \n *                 case 'twitter' :\n *                     console.log( \"twitter: \", match.getTwitterHandle() );\n *             }\n *         }\n *     } );\n *     \n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nAutolinker.match.Match = Autolinker.Util.extend( Object, {\n\t\n\t/**\n\t * @cfg {String} matchedText (required)\n\t * \n\t * The original text that was matched.\n\t */\n\t\n\t\n\t/**\n\t * @constructor\n\t * @param {Object} cfg The configuration properties for the Match instance, specified in an Object (map).\n\t */\n\tconstructor : function( cfg ) {\n\t\tAutolinker.Util.assign( this, cfg );\n\t},\n\n\t\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetType : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Returns the original text that was matched.\n\t * \n\t * @return {String}\n\t */\n\tgetMatchedText : function() {\n\t\treturn this.matchedText;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorHref : Autolinker.Util.abstractMethod,\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @abstract\n\t * @return {String}\n\t */\n\tgetAnchorText : Autolinker.Util.abstractMethod\n\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Email\n * @extends Autolinker.match.Match\n * \n * Represents a Email match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Email = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} email (required)\n\t * \n\t * The email address that was matched.\n\t */\n\t\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'email';\n\t},\n\t\n\t\n\t/**\n\t * Returns the email address that was matched.\n\t * \n\t * @return {String}\n\t */\n\tgetEmail : function() {\n\t\treturn this.email;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'mailto:' + this.email;\n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn this.email;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Twitter\n * @extends Autolinker.match.Match\n * \n * Represents a Twitter match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Twitter = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} twitterHandle (required)\n\t * \n\t * The Twitter handle that was matched.\n\t */\n\t\n\n\t/**\n\t * Returns the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'twitter';\n\t},\n\t\n\t\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetTwitterHandle : function() {\n\t\treturn this.twitterHandle;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\treturn 'https://twitter.com/' + this.twitterHandle;\n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\treturn '@' + this.twitterHandle;\n\t}\n\t\n} );\n/*global Autolinker */\n/**\n * @class Autolinker.match.Url\n * @extends Autolinker.match.Match\n * \n * Represents a Url match found in an input string which should be Autolinked.\n * \n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nAutolinker.match.Url = Autolinker.Util.extend( Autolinker.match.Match, {\n\t\n\t/**\n\t * @cfg {String} url (required)\n\t * \n\t * The url that was matched.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} protocolUrlMatch (required)\n\t * \n\t * `true` if the URL is a match which already has a protocol (i.e. 'http://'), `false` if the match was from a 'www' or\n\t * known TLD match.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} protocolRelativeMatch (required)\n\t * \n\t * `true` if the URL is a protocol-relative match. A protocol-relative match is a URL that starts with '//',\n\t * and will be either http:// or https:// based on the protocol that the site is loaded under.\n\t */\n\t\n\t/**\n\t * @cfg {Boolean} stripPrefix (required)\n\t * @inheritdoc Autolinker#stripPrefix\n\t */\n\t\n\n\t/**\n\t * @private\n\t * @property {RegExp} urlPrefixRegex\n\t * \n\t * A regular expression used to remove the 'http://' or 'https://' and/or the 'www.' from URLs.\n\t */\n\turlPrefixRegex: /^(https?:\\/\\/)?(www\\.)?/i,\n\t\n\t/**\n\t * @private\n\t * @property {RegExp} protocolRelativeRegex\n\t * \n\t * The regular expression used to remove the protocol-relative '//' from the {@link #url} string, for purposes\n\t * of {@link #getAnchorText}. A protocol-relative URL is, for example, \"//yahoo.com\"\n\t */\n\tprotocolRelativeRegex : /^\\/\\//,\n\t\n\t/**\n\t * @private\n\t * @property {Boolean} protocolPrepended\n\t * \n\t * Will be set to `true` if the 'http://' protocol has been prepended to the {@link #url} (because the\n\t * {@link #url} did not have a protocol)\n\t */\n\tprotocolPrepended : false,\n\t\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * \n\t * @return {String}\n\t */\n\tgetType : function() {\n\t\treturn 'url';\n\t},\n\t\n\t\n\t/**\n\t * Returns the url that was matched, assuming the protocol to be 'http://' if the original\n\t * match was missing a protocol.\n\t * \n\t * @return {String}\n\t */\n\tgetUrl : function() {\n\t\tvar url = this.url;\n\t\t\n\t\t// if the url string doesn't begin with a protocol, assume 'http://'\n\t\tif( !this.protocolRelativeMatch && !this.protocolUrlMatch && !this.protocolPrepended ) {\n\t\t\turl = this.url = 'http://' + url;\n\t\t\t\n\t\t\tthis.protocolPrepended = true;\n\t\t}\n\t\t\n\t\treturn url;\n\t},\n\t\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorHref : function() {\n\t\tvar url = this.getUrl();\n\t\t\n\t\treturn url.replace( /&amp;/g, '&' );  // any &amp;'s in the URL should be converted back to '&' if they were displayed as &amp; in the source html \n\t},\n\t\n\t\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t * \n\t * @return {String}\n\t */\n\tgetAnchorText : function() {\n\t\tvar anchorText = this.getUrl();\n\t\t\n\t\tif( this.protocolRelativeMatch ) {\n\t\t\t// Strip off any protocol-relative '//' from the anchor text\n\t\t\tanchorText = this.stripProtocolRelativePrefix( anchorText );\n\t\t}\n\t\tif( this.stripPrefix ) {\n\t\t\tanchorText = this.stripUrlPrefix( anchorText );\n\t\t}\n\t\tanchorText = this.removeTrailingSlash( anchorText );  // remove trailing slash, if there is one\n\t\t\n\t\treturn anchorText;\n\t},\n\t\n\t\n\t// ---------------------------------------\n\t\n\t// Utility Functionality\n\t\n\t/**\n\t * Strips the URL prefix (such as \"http://\" or \"https://\") from the given text.\n\t * \n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   url prefix (such as stripping off \"http://\")\n\t * @return {String} The `anchorText`, with the prefix stripped.\n\t */\n\tstripUrlPrefix : function( text ) {\n\t\treturn text.replace( this.urlPrefixRegex, '' );\n\t},\n\t\n\t\n\t/**\n\t * Strips any protocol-relative '//' from the anchor text.\n\t * \n\t * @private\n\t * @param {String} text The text of the anchor that is being generated, for which to strip off the\n\t *   protocol-relative prefix (such as stripping off \"//\")\n\t * @return {String} The `anchorText`, with the protocol-relative prefix stripped.\n\t */\n\tstripProtocolRelativePrefix : function( text ) {\n\t\treturn text.replace( this.protocolRelativeRegex, '' );\n\t},\n\t\n\t\n\t/**\n\t * Removes any trailing slash from the given `anchorText`, in preparation for the text to be displayed.\n\t * \n\t * @private\n\t * @param {String} anchorText The text of the anchor that is being generated, for which to remove any trailing\n\t *   slash ('/') that may exist.\n\t * @return {String} The `anchorText`, with the trailing slash removed.\n\t */\n\tremoveTrailingSlash : function( anchorText ) {\n\t\tif( anchorText.charAt( anchorText.length - 1 ) === '/' ) {\n\t\t\tanchorText = anchorText.slice( 0, -1 );\n\t\t}\n\t\treturn anchorText;\n\t}\n\t\n} );\nreturn Autolinker;\n\n}));\n"},"lineCount":2325}},"error":null,"hash":"f1b5b89632de5787629208e51a55cbfe","cacheData":{"env":{}}}